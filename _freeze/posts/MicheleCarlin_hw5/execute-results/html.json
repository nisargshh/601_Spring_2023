{
  "hash": "2c36c83b9e90c140323582ae8c3f0de1",
  "result": {
    "markdown": "---\ntitle: \"2019 AirBnB Rentals in NYC Boroughs\"\nauthor: \"Michele Carlin\"\ndesription: \"Imported, Tidied, Summarized/Graphed data\"\ndate: \"03/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - Michele Carlin\n  - air_bnb\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(summarytools)\nlibrary(dbplyr)\nlibrary(readr)\nlibrary(forcats)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nRead in and view summary of 'AB_NYC_2019' dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- read_csv (\"_data/AB_NYC_2019.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 48895 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(AB_NYC)\nview(dfSummary(AB_NYC))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpsRk2DP\\file54a44f12598d.html\n```\n:::\n:::\n\n\n\nThis dataset contains 48895 rows and 16 columns.  Each row/observation contains information on Airbnb rentals in NYC during 2019, including the type of rental (e.g., entire home, private room, shared room), the NYC borough, the price, minimum number of nights, and number of reviews. \n\nPer the data frame summary, the price variable contains some $0's; sort dataframe to review before recoding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- AB_NYC[order(AB_NYC$price),]\n```\n:::\n\n\nRecode price=$0 to NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- AB_NYC %>% \n  mutate_at(c(\"price\"), ~ na_if(., 0))\n\nAB_NYC <- AB_NYC[order(AB_NYC$price, na.last=FALSE),]\n```\n:::\n\n\nRecode 'price' variable into new 'price_range' variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- AB_NYC %>%\n  mutate(price_range = case_when(\n         price < 100 ~ \"less than $100\",\n         price >= 100 & price < 250 ~ \"$100 - $249\",\n         price >= 250 & price < 500 ~ \"$250 - $499\",\n         price >= 500 & price < 750 ~ \"$500 - $749\",\n         price >= 750 & price < 1000 ~ \"$750 - $999\",\n         price >= 1000 ~ \"$1000 or more\")\n  )\nAB_NYC %>% count(price_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  price_range        n\n  <chr>          <int>\n1 $100 - $249    20792\n2 $1000 or more    298\n3 $250 - $499     4991\n4 $500 - $749      682\n5 $750 - $999      255\n6 less than $100 21866\n7 <NA>              11\n```\n:::\n:::\n\n\nDetermine the values associated with each price range category. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(AB_NYC$price_range) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA               \"less than $100\" \"$100 - $249\"    \"$250 - $499\"   \n[5] \"$500 - $749\"    \"$750 - $999\"    \"$1000 or more\" \n```\n:::\n:::\n\n\nSpecify the factor order. \nCan't get factor levels to work...(why are they showing in correct order above all of a sudden, but weren't before when I ran this over and over?).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC<-AB_NYC%>%\n  mutate(price_range_ordered = factor(price, \n                       levels = price_range[c(2,3,4,5,6)]))\n\nAB_NYC %>%\n  filter (!is.na(price_range)) %>% \n ggplot(aes(x=price_range)) + \n   geom_bar(position = \"dodge\",\n           stat = \"count\", fill=\"purple\", colour=\"black\")+\n   labs(title = \"Frequency of Various Price Ranges\", y = \"Frequency\", x = \"Price Range\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nCreate ggplot of rentals by NYC Borough, order bars from highest to lowest value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC %>%\n ggplot(aes(x=fct_infreq(neighbourhood_group))) + \n   geom_bar(stat = \"count\", fill=\"blue\", colour=\"black\")+\n   labs(title = \"AirBnB Rentals by NYC Borough\", y = \"Frequency\", x = \"NYC Borough\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nCreate crosstab of neighbourhood by price_range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ neighbourhood_group + price_range, AB_NYC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   price_range\nneighbourhood_group $100 - $249 $1000 or more $250 - $499 $500 - $749\n      Bronx                 229             2          30           6\n      Brooklyn             7677            67        1244         158\n      Manhattan           11234           213        3486         498\n      Queens               1548            13         217          18\n      Staten Island         104             3          14           2\n                   price_range\nneighbourhood_group $750 - $999 less than $100\n      Bronx                   1            822\n      Brooklyn               54          10895\n      Manhattan             194           6035\n      Queens                  5           3865\n      Staten Island           1            249\n```\n:::\n:::\n\n\nCalculate min/max/mean price (price) and group data by neighbourhood_group and room_type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGrpByNeighborhoodRoom <- AB_NYC %>%\n\tgroup_by(neighbourhood_group) %>%\n\tsummarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) \nhead(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  neighbourhood_group minADR maxADR meanADR\n  <chr>                <dbl>  <dbl>   <dbl>\n1 Bronx                   10   2500    87.6\n2 Brooklyn                10  10000   124. \n3 Manhattan               10  10000   197. \n4 Queens                  10  10000    99.5\n5 Staten Island           13   5000   115. \n```\n:::\n\n```{.r .cell-code}\nAB_NYC %>%\n ggplot(aes(x=neighbourhood_group, y=price)) + \n   geom_bar(position = \"dodge\",fill=\"pink\", colour=\"black\",\n           stat = \"summary\",\n           fun = \"mean\")+\n   labs(title = \"Average AirBnB Nightly Cost by NYC Borough\", y = \"Average Nighyly Cost\", x = \"NYC Borough\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing non-finite values (`stat_summary()`).\n```\n:::\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw5_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGrpByNeighborhoodRoom <- AB_NYC %>%\n\tgroup_by(neighbourhood_group, room_type) %>%\n\tsummarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'neighbourhood_group'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nhead(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   neighbourhood_group [2]\n  neighbourhood_group room_type       minADR maxADR meanADR\n  <chr>               <chr>            <dbl>  <dbl>   <dbl>\n1 Bronx               Entire home/apt     28   1000   128. \n2 Bronx               Private room        10   2500    66.9\n3 Bronx               Shared room         20    800    59.8\n4 Brooklyn            Entire home/apt     10  10000   178. \n5 Brooklyn            Private room        10   7500    76.5\n6 Brooklyn            Shared room         15    725    50.8\n```\n:::\n\n```{.r .cell-code}\ntail(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   neighbourhood_group [2]\n  neighbourhood_group room_type       minADR maxADR meanADR\n  <chr>               <chr>            <dbl>  <dbl>   <dbl>\n1 Queens              Entire home/apt     10   2600   147. \n2 Queens              Private room        10  10000    71.8\n3 Queens              Shared room         11   1800    69.0\n4 Staten Island       Entire home/apt     48   5000   174. \n5 Staten Island       Private room        20    300    62.3\n6 Staten Island       Shared room         13    150    57.4\n```\n:::\n\n```{.r .cell-code}\nAB_NYC %>%\nggplot(aes(x=neighbourhood_group, y=price, fill=room_type)) + \n   geom_bar(position = \"dodge\",\n           stat = \"summary\",\n           fun = \"mean\")+\n   facet_wrap(vars(room_type), scales = \"free_x\") +\n  scale_fill_manual(values=c(\"green\",\"orange\",\"blue\"))+\n  theme(legend.position=\"none\")+\n   scale_x_discrete(guide = guide_axis(n.dodge=2))+\n   labs(title = \"Average AirBnB Nightly Cost by NYC Borough and Room Type\", y = \"Average Nightly Cost\", x = \"NYC Borough\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing non-finite values (`stat_summary()`).\n```\n:::\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw5_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC %>%\n  ggplot(aes(fill=price_range, x=room_type)) + \n    geom_bar(position=\"dodge\", stat=\"count\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw5_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "MicheleCarlin_hw5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}