{
  "hash": "40b0118bae3b41a5c94cd4fb7c8202c6",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Poultry and Eggs\"\nauthor: \"Keith Martin\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"08/18/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - eggs\n  - \n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(googlesheets4)\nlibrary(readxl)\nlibrary(lubridate)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nFor this challenge, I re-used the data set that I used in challenge three. In that challenge I had previously tidied the data and conducted a basic sanity check to ensure the date was entered correctly.\n\n## Read in data\n\nFirst I loaded in the Organice Poultry Data set.\n\n::: {.cell}\n\n```{.r .cell-code}\n### Loading in the libraries of the excel files\nexcel_sheets(\"_data/organiceggpoultry.xls\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Data\"                            \"Organic egg prices, 2004-13\"    \n[3] \"Organic poultry prices, 2004-13\"\n```\n:::\n:::\n\n\n### Briefly describe the data\nThis data set is tracking the prices of various quantities of eggs and chicken cuts from the years 2004 to 2013.\n\n## Tidy Data (as needed)\nIn this challenge, due to outside time restraints, i re-used the data that I made tidy last week. However, this this challenge, I leveraged the lubridate functions to show a better picture of the date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_poulty<-read_excel(\"_data/organiceggpoultry.xls\", \n                         sheet = \"Data\",\n                          range =cell_limits(c(6,2),c(NA,12)),\n                          col_names = c(\"date\", \"XL_Dozen\", \"XL_1/2_Doz.\", \"L_Dozen\", \"L_1/2_Doz\", \"Remove\", \"Ckn_Whole\", \"Ckn_BS_Breast\", \"Ckn_Bone_Breast\", \"Ckn_Whole_legs\", \"Ckn_Thighs\"),\n                      \n                                        \n                        )\nraw_poulty %>%\n  select(-c(Remove))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 10\n   date  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶ Ckn_W…⁷ Ckn_T…⁸\n   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl> <chr>  \n 1 Jan …    230     132     230     126     198.    646. too few    194. too few\n 2 Febr…    230     134.    226.    128.    198.    642. too few    194. 203    \n 3 March    230     137     225     131     209     642. too few    194. 203    \n 4 April    234.    137     225     131     212     642. too few    194. 203    \n 5 May      236     137     225     131     214.    642. too few    194. 203    \n 6 June     241     137     231.    134.    216.    641  too few    202. 200.375\n 7 July     241     137     234.    134.    217     642. 390.5      204. 199.5  \n 8 Augu…    241     137     234.    134.    217     642. 390.5      204. 199.5  \n 9 Sept…    241     136.    234.    130.    217     642. 390.5      204. 199.5  \n10 Octo…    241     136.    234.    128.    217     642. 390.5      204. 199.5  \n# … with 110 more rows, and abbreviated variable names ¹​XL_Dozen,\n#   ²​`XL_1/2_Doz.`, ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast,\n#   ⁷​Ckn_Whole_legs, ⁸​Ckn_Thighs\n```\n:::\n:::\n\n\n## Identify variables that need to be mutated\n\nIn this data, there we're a few things that needed to be cleaned up. There was a typo or a \"/1\" in the data that needed to be mutated and removed. Additionally, I separated the month and date into two separate columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### remove that /1 from the February date\nraw_poulty_clean <-raw_poulty %>% \n  mutate(date = str_remove(date, \" /1\"))\n### Separate the month and the year, fill the years in for the rest of the months\nraw_poulty_clean<-raw_poulty_clean %>%\n  separate(date, into=c(\"month\", \"year\"), sep =\" \")%>%\n  fill(year)\nraw_poulty_clean  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 12\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl> <chr>  \n 1 Jan      2004     230     132     230     126  NA        198.    646. too few\n 2 February 2004     230     134.    226.    128. NA        198.    642. too few\n 3 March    2004     230     137     225     131  NA        209     642. too few\n 4 April    2004     234.    137     225     131  NA        212     642. too few\n 5 May      2004     236     137     225     131  NA        214.    642. too few\n 6 June     2004     241     137     231.    134. NA        216.    641  too few\n 7 July     2004     241     137     234.    134. NA        217     642. 390.5  \n 8 August   2004     241     137     234.    134. NA        217     642. 390.5  \n 9 Septemb… 2004     241     136.    234.    130. NA        217     642. 390.5  \n10 October  2004     241     136.    234.    128. NA        217     642. 390.5  \n# … with 110 more rows, 2 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <chr>, and abbreviated variable names ¹​XL_Dozen, ²​`XL_1/2_Doz.`,\n#   ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n\nNow I decided to use lubridate for month and year since this data did not include any data that indicated days. I had it added to its own row. It does not add much in terms of story to this data set, but it is more efficent and visually appealing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_poulty_clean<-raw_poulty_clean%>%\n  mutate(date = str_c(month, year, sep = \" \"), ###combine month and year into date column\n         date = my(date) ### lubridate will automatically make them into date format\n         )\n  \n  select(raw_poulty_clean, month, year, date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 3\n   month     year  date      \n   <chr>     <chr> <date>    \n 1 Jan       2004  2004-01-01\n 2 February  2004  2004-02-01\n 3 March     2004  2004-03-01\n 4 April     2004  2004-04-01\n 5 May       2004  2004-05-01\n 6 June      2004  2004-06-01\n 7 July      2004  2004-07-01\n 8 August    2004  2004-08-01\n 9 September 2004  2004-09-01\n10 October   2004  2004-10-01\n# … with 110 more rows\n```\n:::\n:::\n\n\nBefore I could do my sanity check on the eggs and the chicken, I needed to pivot longer. Before I could do that, I needed to recode the \"too few\" entries into 0. However, changing them to \"0\" was not enough I needed to re-code them as integers as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nckn_edited<- raw_poulty_clean %>%\n  mutate(Ckn_Bone_Breast = recode(Ckn_Bone_Breast, `too few` = \"0\"),\n      Ckn_Thighs = recode(Ckn_Thighs, `too few`=\"0\"))\nckn_edited\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 13\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl> <chr>  \n 1 Jan      2004     230     132     230     126  NA        198.    646. 0      \n 2 February 2004     230     134.    226.    128. NA        198.    642. 0      \n 3 March    2004     230     137     225     131  NA        209     642. 0      \n 4 April    2004     234.    137     225     131  NA        212     642. 0      \n 5 May      2004     236     137     225     131  NA        214.    642. 0      \n 6 June     2004     241     137     231.    134. NA        216.    641  0      \n 7 July     2004     241     137     234.    134. NA        217     642. 390.5  \n 8 August   2004     241     137     234.    134. NA        217     642. 390.5  \n 9 Septemb… 2004     241     136.    234.    130. NA        217     642. 390.5  \n10 October  2004     241     136.    234.    128. NA        217     642. 390.5  \n# … with 110 more rows, 3 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <chr>, date <date>, and abbreviated variable names ¹​XL_Dozen,\n#   ²​`XL_1/2_Doz.`, ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n\nBelow I recoded the 0s into integers rather than characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nckn_edited$Ckn_Bone_Breast<-as.numeric(ckn_edited$Ckn_Bone_Breast)\nckn_edited$Ckn_Thighs<-as.numeric(ckn_edited$Ckn_Thighs)\nckn_edited\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 13\n   month    year  XL_Do…¹ XL_1/…² L_Dozen L_1/2…³ Remove Ckn_W…⁴ Ckn_B…⁵ Ckn_B…⁶\n   <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>    <dbl>   <dbl>   <dbl>\n 1 Jan      2004     230     132     230     126  NA        198.    646.      0 \n 2 February 2004     230     134.    226.    128. NA        198.    642.      0 \n 3 March    2004     230     137     225     131  NA        209     642.      0 \n 4 April    2004     234.    137     225     131  NA        212     642.      0 \n 5 May      2004     236     137     225     131  NA        214.    642.      0 \n 6 June     2004     241     137     231.    134. NA        216.    641       0 \n 7 July     2004     241     137     234.    134. NA        217     642.    390.\n 8 August   2004     241     137     234.    134. NA        217     642.    390.\n 9 Septemb… 2004     241     136.    234.    130. NA        217     642.    390.\n10 October  2004     241     136.    234.    128. NA        217     642.    390.\n# … with 110 more rows, 3 more variables: Ckn_Whole_legs <dbl>,\n#   Ckn_Thighs <dbl>, date <date>, and abbreviated variable names ¹​XL_Dozen,\n#   ²​`XL_1/2_Doz.`, ³​`L_1/2_Doz`, ⁴​Ckn_Whole, ⁵​Ckn_BS_Breast, ⁶​Ckn_Bone_Breast\n```\n:::\n:::\n\n\nI then pivoted longer to include the previous egg/chicken types as rows rather than columns so it was easier to do a sanity check. \n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer<- pivot_longer(ckn_edited,  cols=c(\"XL_Dozen\", \"XL_1/2_Doz.\", \"L_Dozen\", \"L_1/2_Doz\", \"Ckn_Whole\", \"Ckn_BS_Breast\", \"Ckn_Bone_Breast\", \"Ckn_Whole_legs\", \"Ckn_Thighs\"), \n               names_to = \"eggType/cknType\",\n               values_to = \"avgPrice\"\n  )\neggs_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,080 × 6\n   month    year  Remove date       `eggType/cknType` avgPrice\n   <chr>    <chr> <lgl>  <date>     <chr>                <dbl>\n 1 Jan      2004  NA     2004-01-01 XL_Dozen              230 \n 2 Jan      2004  NA     2004-01-01 XL_1/2_Doz.           132 \n 3 Jan      2004  NA     2004-01-01 L_Dozen               230 \n 4 Jan      2004  NA     2004-01-01 L_1/2_Doz             126 \n 5 Jan      2004  NA     2004-01-01 Ckn_Whole             198.\n 6 Jan      2004  NA     2004-01-01 Ckn_BS_Breast         646.\n 7 Jan      2004  NA     2004-01-01 Ckn_Bone_Breast         0 \n 8 Jan      2004  NA     2004-01-01 Ckn_Whole_legs        194.\n 9 Jan      2004  NA     2004-01-01 Ckn_Thighs              0 \n10 February 2004  NA     2004-02-01 XL_Dozen              230 \n# … with 1,070 more rows\n```\n:::\n:::\n\n\nBelow I included the basic summary statistics like median, mode, min, max and standard deviation to show that the lubridate function and the pivot longer function worked as intended.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer%>%\n  group_by(date)%>%\n  summarise (\n      sd_year = sd (avgPrice, na.rm=TRUE),\n      max_year = max(avgPrice, na.rm = TRUE),\n      min_year = min(avgPrice, na.rm = TRUE),\n      avg_year = mean (avgPrice, na.rm = TRUE),\n      med_year = median(avgPrice, na.rm = TRUE)\n        )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 6\n   date       sd_year max_year min_year avg_year med_year\n   <date>       <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n 1 2004-01-01    190.     646.       0      195.     194.\n 2 2004-02-01    175.     642.       0      217.     198.\n 3 2004-03-01    174.     642.       0      219      203 \n 4 2004-04-01    174.     642.       0      220.     203 \n 5 2004-05-01    174.     642.       0      220.     203 \n 6 2004-06-01    174.     641        0      222.     202.\n 7 2004-07-01    160.     642.     134.     266.     217 \n 8 2004-08-01    160.     642.     134.     266.     217 \n 9 2004-09-01    160.     642.     130.     266.     217 \n10 2004-10-01    160.     642.     128.     266.     217 \n# … with 110 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}