{
  "hash": "418dfdb72a0482917f6b3fb37922447f",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Nanci Kopecky\"\ndescription: \"Tidy Data: Pivoting Animal Weights\"\ndate: \"3/6/23\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ⭐\n-   eggs_tidy.csv ⭐⭐ or organiceggpoultry.xls ⭐⭐⭐\n-   australian_marriage\\*.xls ⭐⭐⭐\n-   USA Households\\*.xlsx ⭐⭐⭐⭐\n-   sce_labor_chart_data_public.xlsx 🌟🌟🌟🌟🌟\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nanimal_weight<-read.csv(file = \"_data/animal_weight.csv\",\n                header=TRUE,\n                sep = \",\"\n                )\n```\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\nThis data file has nine geographic areas (9 observaitions) defined by the Inter-governmental Panel on Climate Change (IPCC) and the weights of seventeen animals (17 varioables). One idea is to pivot or organize the data to compare weights of animals in different geographic areas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            IPCC.Area Cattle...dairy Cattle...non.dairy Buffaloes\n1 Indian Subcontinent            275                110       295\n2      Eastern Europe            550                391       380\n3              Africa            275                173       380\n4             Oceania            500                330       380\n5      Western Europe            600                420       380\n6       Latin America            400                305       380\n  Swine...market Swine...breeding Chicken...Broilers Chicken...Layers Ducks\n1             28               28                0.9              1.8   2.7\n2             50              180                0.9              1.8   2.7\n3             28               28                0.9              1.8   2.7\n4             45              180                0.9              1.8   2.7\n5             50              198                0.9              1.8   2.7\n6             28               28                0.9              1.8   2.7\n  Turkeys Sheep Goats Horses Asses Mules Camels Llamas\n1     6.8  28.0  30.0    238   130   130    217    217\n2     6.8  48.5  38.5    377   130   130    217    217\n3     6.8  28.0  30.0    238   130   130    217    217\n4     6.8  48.5  38.5    377   130   130    217    217\n5     6.8  48.5  38.5    377   130   130    217    217\n6     6.8  28.0  30.0    238   130   130    217    217\n```\n:::\n\n```{.r .cell-code}\nview(animal_weight)\nncol(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\nnrow(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nUsed the %\\>% pipe feature with the mutate function to add a column.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\nanimal_weight%>%mutate(Cattle...dairy - Cattle...non.dairy, .after = Cattle...non.dairy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            IPCC.Area Cattle...dairy Cattle...non.dairy\n1 Indian Subcontinent            275                110\n2      Eastern Europe            550                391\n3              Africa            275                173\n4             Oceania            500                330\n5      Western Europe            600                420\n6       Latin America            400                305\n7                Asia            350                391\n8         Middle east            275                173\n9    Northern America            604                389\n  Cattle...dairy - Cattle...non.dairy Buffaloes Swine...market Swine...breeding\n1                                 165       295             28               28\n2                                 159       380             50              180\n3                                 102       380             28               28\n4                                 170       380             45              180\n5                                 180       380             50              198\n6                                  95       380             28               28\n7                                 -41       380             50              180\n8                                 102       380             28               28\n9                                 215       380             46              198\n  Chicken...Broilers Chicken...Layers Ducks Turkeys Sheep Goats Horses Asses\n1                0.9              1.8   2.7     6.8  28.0  30.0    238   130\n2                0.9              1.8   2.7     6.8  48.5  38.5    377   130\n3                0.9              1.8   2.7     6.8  28.0  30.0    238   130\n4                0.9              1.8   2.7     6.8  48.5  38.5    377   130\n5                0.9              1.8   2.7     6.8  48.5  38.5    377   130\n6                0.9              1.8   2.7     6.8  28.0  30.0    238   130\n7                0.9              1.8   2.7     6.8  48.5  38.5    377   130\n8                0.9              1.8   2.7     6.8  28.0  30.0    238   130\n9                0.9              1.8   2.7     6.8  48.5  38.5    377   130\n  Mules Camels Llamas\n1   130    217    217\n2   130    217    217\n3   130    217    217\n4   130    217    217\n5   130    217    217\n6   130    217    217\n7   130    217    217\n8   130    217    217\n9   130    217    217\n```\n:::\n\n```{.r .cell-code}\nsummary(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  IPCC.Area         Cattle...dairy  Cattle...non.dairy   Buffaloes    \n Length:9           Min.   :275.0   Min.   :110        Min.   :295.0  \n Class :character   1st Qu.:275.0   1st Qu.:173        1st Qu.:380.0  \n Mode  :character   Median :400.0   Median :330        Median :380.0  \n                    Mean   :425.4   Mean   :298        Mean   :370.6  \n                    3rd Qu.:550.0   3rd Qu.:391        3rd Qu.:380.0  \n                    Max.   :604.0   Max.   :420        Max.   :380.0  \n Swine...market  Swine...breeding Chicken...Broilers Chicken...Layers\n Min.   :28.00   Min.   : 28.0    Min.   :0.9        Min.   :1.8     \n 1st Qu.:28.00   1st Qu.: 28.0    1st Qu.:0.9        1st Qu.:1.8     \n Median :45.00   Median :180.0    Median :0.9        Median :1.8     \n Mean   :39.22   Mean   :116.4    Mean   :0.9        Mean   :1.8     \n 3rd Qu.:50.00   3rd Qu.:180.0    3rd Qu.:0.9        3rd Qu.:1.8     \n Max.   :50.00   Max.   :198.0    Max.   :0.9        Max.   :1.8     \n     Ducks        Turkeys        Sheep           Goats           Horses     \n Min.   :2.7   Min.   :6.8   Min.   :28.00   Min.   :30.00   Min.   :238.0  \n 1st Qu.:2.7   1st Qu.:6.8   1st Qu.:28.00   1st Qu.:30.00   1st Qu.:238.0  \n Median :2.7   Median :6.8   Median :48.50   Median :38.50   Median :377.0  \n Mean   :2.7   Mean   :6.8   Mean   :39.39   Mean   :34.72   Mean   :315.2  \n 3rd Qu.:2.7   3rd Qu.:6.8   3rd Qu.:48.50   3rd Qu.:38.50   3rd Qu.:377.0  \n Max.   :2.7   Max.   :6.8   Max.   :48.50   Max.   :38.50   Max.   :377.0  \n     Asses         Mules         Camels        Llamas   \n Min.   :130   Min.   :130   Min.   :217   Min.   :217  \n 1st Qu.:130   1st Qu.:130   1st Qu.:217   1st Qu.:217  \n Median :130   Median :130   Median :217   Median :217  \n Mean   :130   Mean   :130   Mean   :217   Mean   :217  \n 3rd Qu.:130   3rd Qu.:130   3rd Qu.:217   3rd Qu.:217  \n Max.   :130   Max.   :130   Max.   :217   Max.   :217  \n```\n:::\n\n```{.r .cell-code}\nanimal_weight %>%\n  summarize(\n    mean_Cattledairy=mean(Cattle...dairy),\n    mean_Cattlenondairy=mean(Cattle...non.dairy),\n    sd_Cattledairy=sd(Cattle...dairy),\n    sd_Cattlenondairy=sd(Cattle...non.dairy)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mean_Cattledairy mean_Cattlenondairy sd_Cattledairy sd_Cattlenondairy\n1         425.4444                 298       140.3853          116.2594\n```\n:::\n\n```{.r .cell-code}\nncol(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\nnrow(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n## Practicing basics of tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb<-tibble(x=1:5,y=2,z=x+y)\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x     y     z\n  <int> <dbl> <dbl>\n1     1     2     3\n2     2     2     4\n3     3     2     5\n4     4     2     6\n5     5     2     7\n```\n:::\n\n```{.r .cell-code}\ntb1<-tibble(': (' = \"sad\", ': )' = \"happy\",'24'=\"24\")\ntb1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  `: (` `: )` `24` \n  <chr> <chr> <chr>\n1 sad   happy 24   \n```\n:::\n\n```{.r .cell-code}\nas_tibble(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 17\n  IPCC.A…¹ Cattl…² Cattl…³ Buffa…⁴ Swine…⁵ Swine…⁶ Chick…⁷ Chick…⁸ Ducks Turkeys\n  <chr>      <int>   <int>   <int>   <int>   <int>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian …     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern…     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western…     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A…     400     305     380      28      28     0.9     1.8   2.7     6.8\n7 Asia         350     391     380      50     180     0.9     1.8   2.7     6.8\n8 Middle …     275     173     380      28      28     0.9     1.8   2.7     6.8\n9 Norther…     604     389     380      46     198     0.9     1.8   2.7     6.8\n# … with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <int>, Asses <int>,\n#   Mules <int>, Camels <int>, Llamas <int>, and abbreviated variable names\n#   ¹​IPCC.Area, ²​Cattle...dairy, ³​Cattle...non.dairy, ⁴​Buffaloes,\n#   ⁵​Swine...market, ⁶​Swine...breeding, ⁷​Chicken...Broilers, ⁸​Chicken...Layers\n```\n:::\n:::\n\n\n## Trying Data Frames\n\nThe first data frame is accurate, but not sure how useful. The second dataframe was just exploring the structure of the data frames, it is not useful or accurate, but I understand what the number means after the array c.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1<-tibble(IPCC.Area = rep(c(\"Indian Sub\", \"E. Europe\", \"Africa\", \"Oceania\", \"W. Europe\", \"Latin America\", \"Asia\", \"Middle East\", \"N. America\"),1),\n           CattleDairy = rnorm(9, mean=425.44, sd=140.39), \n           CattleNonDairy = rnorm(9, mean=298, sd=116.26))\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  IPCC.Area     CattleDairy CattleNonDairy\n  <chr>               <dbl>          <dbl>\n1 Indian Sub           507.           248.\n2 E. Europe            369.           465.\n3 Africa               520.           202.\n4 Oceania              394.           283.\n5 W. Europe            320.           470.\n6 Latin America        569.           529.\n7 Asia                 582.           236.\n8 Middle East          476.           467.\n9 N. America           229.           110.\n```\n:::\n\n```{.r .cell-code}\ndf2<-tibble(CattleType=rep(c(\"Dairy\", \"Non Dairy\"), 9),\n            IPCC.Area =rep(c(\"Indian Sub\", \"E. Europe\", \"Africa\", \"Oceania\", \"W. Europe\", \"Latin America\", \"Asia\", \"Middle East\", \"N. America\"),2),\n           CattleDairy = rnorm(18,mean=425.44, sd=140.39),\n           CattleNonDairy = rnorm(18, mean=298, sd=116.26)\n           )\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 4\n   CattleType IPCC.Area     CattleDairy CattleNonDairy\n   <chr>      <chr>               <dbl>          <dbl>\n 1 Dairy      Indian Sub          265.           138. \n 2 Non Dairy  E. Europe           466.           329. \n 3 Dairy      Africa              447.           312. \n 4 Non Dairy  Oceania             262.           181. \n 5 Dairy      W. Europe           336.           199. \n 6 Non Dairy  Latin America       319.           294. \n 7 Dairy      Asia                436.           302. \n 8 Non Dairy  Middle East         651.           286. \n 9 Dairy      N. America           36.0          258. \n10 Non Dairy  Indian Sub          801.           475. \n11 Dairy      E. Europe           467.           299. \n12 Non Dairy  Africa              345.           179. \n13 Dairy      Oceania             252.           454. \n14 Non Dairy  W. Europe           286.           196. \n15 Dairy      Latin America       645.           356. \n16 Non Dairy  Asia                409.           302. \n17 Dairy      Middle East         399.           112. \n18 Non Dairy  N. America          119.            85.9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3<-tibble(CattleType=rep(c(\"Dairy\", \"Non Dairy\"), 1),\n             IndianSub=rep(c(rnorm(1,mean=425.44, sd=140.39), rnorm(1, mean=298, sd=116.26))),\n            E.Europe=rep(c(rnorm(1,mean=425.44, sd=140.39), rnorm(1, mean=298, sd=116.26))))\n\ndf3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  CattleType IndianSub E.Europe\n  <chr>          <dbl>    <dbl>\n1 Dairy           361.     512.\n2 Non Dairy       300.     280.\n```\n:::\n:::\n\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\nPivot_Longer command\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1<-pivot_longer(df1, col = c(CattleDairy, CattleNonDairy),\n                  names_to = \"Cattle_Type\",\n                  values_to = \"Animal_Weight\")\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 3\n   IPCC.Area     Cattle_Type    Animal_Weight\n   <chr>         <chr>                  <dbl>\n 1 Indian Sub    CattleDairy             507.\n 2 Indian Sub    CattleNonDairy          248.\n 3 E. Europe     CattleDairy             369.\n 4 E. Europe     CattleNonDairy          465.\n 5 Africa        CattleDairy             520.\n 6 Africa        CattleNonDairy          202.\n 7 Oceania       CattleDairy             394.\n 8 Oceania       CattleNonDairy          283.\n 9 W. Europe     CattleDairy             320.\n10 W. Europe     CattleNonDairy          470.\n11 Latin America CattleDairy             569.\n12 Latin America CattleNonDairy          529.\n13 Asia          CattleDairy             582.\n14 Asia          CattleNonDairy          236.\n15 Middle East   CattleDairy             476.\n16 Middle East   CattleNonDairy          467.\n17 N. America    CattleDairy             229.\n18 N. America    CattleNonDairy          110.\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}