{
  "hash": "fec144c58f76558a61af96d2ab905007",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Aditya Salveru\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"02/25/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_tidy_data <- read_csv(\"_data/eggs_tidy.csv\", show_col_types = FALSE)\n```\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(eggs_tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\nsummary(eggs_tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    month                year      large_half_dozen  large_dozen   \n Length:120         Min.   :2004   Min.   :126.0    Min.   :225.0  \n Class :character   1st Qu.:2006   1st Qu.:129.4    1st Qu.:233.5  \n Mode  :character   Median :2008   Median :174.5    Median :267.5  \n                    Mean   :2008   Mean   :155.2    Mean   :254.2  \n                    3rd Qu.:2011   3rd Qu.:174.5    3rd Qu.:268.0  \n                    Max.   :2013   Max.   :178.0    Max.   :277.5  \n extra_large_half_dozen extra_large_dozen\n Min.   :132.0          Min.   :230.0    \n 1st Qu.:135.8          1st Qu.:241.5    \n Median :185.5          Median :285.5    \n Mean   :164.2          Mean   :266.8    \n 3rd Qu.:185.5          3rd Qu.:285.5    \n Max.   :188.1          Max.   :290.0    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(eggs_tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>\n1 January   2004             126         230                    132 \n2 February  2004             128.        226.                   134.\n3 March     2004             131         225                    137 \n4 April     2004             131         225                    137 \n5 May       2004             131         225                    137 \n6 June      2004             134.        231.                   137 \n# ‚Ñπ 1 more variable: extra_large_dozen <dbl>\n```\n:::\n:::\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n\nFrom January 2004 through December 2013, or ten years, the dataset provides monthly data. It can hold the volume of six different types of egg cartons on average. Because a carton is never sold in parts, we may assume that the numbers are average, however the dataset only contains a small number of decimal point values. For instance, the month of February 2004 has 128.5 huge half-dozen sized boxes. \nThe following guidelines were given in order to make the data \"tidy.\"\nA) Every variable needs to have its own column\nB) Each observation requires a separate row.\nC) Every value needs to be in its own cell.\n\n#### Analysis:\nMonth, Year, Carton_Type, and Units are the four data points that make up the dataset. \nWe can see that each variable has its own column, but contrary to rule 2, the dataset also contains columns for observations, therefore the large half dozen, large dozen, extra large half dozen, and extra large dozen no longer have their own unique columns. To do this, a new column called \"carton_type\" will be added, including information on the carton, and its corresponding average value will be stored in the \"units\" column.\nBy pivoting it to have more rows and fewer columns, the #eggs dataset will be made \"Tidy\". The following columns need to be pivoted: large half dozen, large dozen, extra large half dozen, and extra large dozen. These columns will turn into rows for the respective month and year of observation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivoted_eggs_tidy_data <- eggs_tidy_data %>%\n  pivot_longer(\n    cols = ends_with(\"dozen\"),\n    names_to = \"carton_type\",\n    values_to = \"units\")\ndim(pivoted_eggs_tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480   4\n```\n:::\n:::\n\n# The dataset has four columns and 480 rows.\n\n",
    "supporting": [
      "AdityaSalveru_Challange3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}