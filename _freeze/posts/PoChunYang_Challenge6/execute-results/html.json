{
  "hash": "b2aef419abeca879722f6c8baf8b5073",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6\"\nauthor: \"PoChun Yang\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"04/08/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n  - air_bnb\n  - fed_rate\n  - debt\n  - usa_households\n  - abc_poll\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n5)  Create at least one graph depicting part-whole or flow relationships\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - debt  ⭐\n  - fed_rate ⭐⭐\n  - abc_poll ⭐⭐⭐\n  - usa_hh ⭐⭐⭐\n  - hotel_bookings ⭐⭐⭐⭐\n  - AB_NYC ⭐⭐⭐⭐⭐\n\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<-read_excel(\"_data/debt_in_trillions.xlsx\")\ndf2<- readxl::read_xlsx(\"_data/debt_in_trillions.xlsx\")\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  `Year and Quarter` Mortgage `HE Revolving` Auto …¹ Credi…² Stude…³ Other Total\n  <chr>                 <dbl>          <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>\n1 03:Q1                  4.94          0.242   0.641   0.688   0.241 0.478  7.23\n2 03:Q2                  5.08          0.26    0.622   0.693   0.243 0.486  7.38\n3 03:Q3                  5.18          0.269   0.684   0.693   0.249 0.477  7.56\n4 03:Q4                  5.66          0.302   0.704   0.698   0.253 0.449  8.07\n5 04:Q1                  5.84          0.328   0.72    0.695   0.260 0.446  8.29\n6 04:Q2                  5.97          0.367   0.743   0.697   0.263 0.423  8.46\n# … with abbreviated variable names ¹​`Auto Loan`, ²​`Credit Card`,\n#   ³​`Student Loan`\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nFirst of all, I used two different method to read the data. The data is quite clean so we do not need a lot of changing. I used the first data for the Time Dependent Visualization. Then, I used second tidy data for Visualizing Part-Whole Relationships.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1<-df%>%\n  mutate(date = parse_date_time(`Year and Quarter`, orders=\"yq\"))\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 9\n   `Year and Quarter` Mortgage HE Revolvin…¹ Auto …² Credi…³ Stude…⁴ Other Total\n   <chr>                 <dbl>         <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                  4.94         0.242   0.641   0.688   0.241 0.478  7.23\n 2 03:Q2                  5.08         0.26    0.622   0.693   0.243 0.486  7.38\n 3 03:Q3                  5.18         0.269   0.684   0.693   0.249 0.477  7.56\n 4 03:Q4                  5.66         0.302   0.704   0.698   0.253 0.449  8.07\n 5 04:Q1                  5.84         0.328   0.72    0.695   0.260 0.446  8.29\n 6 04:Q2                  5.97         0.367   0.743   0.697   0.263 0.423  8.46\n 7 04:Q3                  6.21         0.426   0.751   0.706   0.33  0.41   8.83\n 8 04:Q4                  6.36         0.468   0.728   0.717   0.346 0.423  9.04\n 9 05:Q1                  6.51         0.502   0.725   0.71    0.364 0.394  9.21\n10 05:Q2                  6.70         0.528   0.774   0.717   0.374 0.402  9.49\n# … with 64 more rows, 1 more variable: date <dttm>, and abbreviated variable\n#   names ¹​`HE Revolving`, ²​`Auto Loan`, ³​`Credit Card`, ⁴​`Student Loan`\n```\n:::\n\n```{.r .cell-code}\ndf2<-df2%>%\n   mutate(Date = yq(`Year and Quarter`))%>%\n  pivot_longer(cols= !c(`Year and Quarter`, Date), names_to = \"Debt Type\", values_to = \"Amount\") %>%\n          select(!`Year and Quarter`)\n```\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n## Time Dependent Visualization\nIn the time dependent visualization, I want to get the Mortgage changing from 2003 to 2021. Therefore, I used the ggplot command, add the point command, and the line. In addition, I want to add the unit for the y-axis.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1,aes(x=date, y=Mortgage))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](PoChunYang_Challenge6_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(df1, aes(x=date,y=Mortgage))+\n  geom_point(size=.5,color=\"red\")+\n  geom_line()+\n  scale_y_continuous(labels = scales::label_number(suffix = \"Trillion\"))\n```\n\n::: {.cell-output-display}\n![](PoChunYang_Challenge6_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n## Visualizing Part-Whole Relationships\nI used several commands to achieve multiple lines in the graph. We have to notice that the total in the date so we have to remove the total data. In the final, the graph looks pretty well. Moreover, the Mortgage line show clearly is the highest debt type for every year. In the second bar graph, it shows that the debt changing from 2003 to 2021 with all the type of debt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2%>%\n    filter(`Debt Type`!= \"Total\") %>%\n    ggplot(aes(x= Date, y=Amount, color= `Debt Type`)) + \n    geom_line(show.legend = TRUE) +\n    geom_point()+\n    theme_bw()+\n    labs( x= \"date\", y= \"total (in trillions)\")\n```\n\n::: {.cell-output-display}\n![](PoChunYang_Challenge6_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndf2%>%\n  filter(`Debt Type`!= \"Total\") %>%\n    mutate(`Debt Type` =  fct_relevel(`Debt Type`, \"Auto Loan\", \"Credit Card\", \"Mortgage\", \"HE Revolving\", \"Other\", \"Student Loan\"))%>%\n    ggplot(aes(x= Date, y=Amount, fill= `Debt Type`)) + \n    geom_bar(show.legend = TRUE, stat = \"identity\")+ \n    theme_bw()+\n    labs( x= \"date\", y= \"total (in trillions)\")\n```\n\n::: {.cell-output-display}\n![](PoChunYang_Challenge6_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "PoChunYang_Challenge6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}