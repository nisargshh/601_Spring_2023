{
  "hash": "4c38a8c6c7c70f1020b4e8c42adb0e0d",
  "result": {
    "markdown": "---\ntitle: \"2019 AirBnB Rentals in NYC Boroughs\"\nauthor: \"Michele Carlin\"\ndesription: \"Imported, Tidied, Summarized/Graphed data\"\ndate: \"04/19/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - Michele Carlin\n  - air_bnb\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(summarytools)\nlibrary(dbplyr)\nlibrary(readxl)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(scales)\n\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\nRead in and view summary of 'AB_NYC_2019' dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- read_csv (\"_data/AB_NYC_2019.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 48895 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nView(AB_NYC)\nview(dfSummary(AB_NYC))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpgxJwDt\\file3ba467e3f04.html\n```\n:::\n:::\n\n\n\nThis dataset contains 48895 rows and 16 columns.  Each row/observation contains information on Airbnb rentals in NYC during 2019, including the type of rental (e.g., entire home, private room, shared room), the NYC borough, the price, minimum number of nights, and number of reviews. \n\nPer the data frame summary, the price variable contains some $0's; sort dataframe to review before recoding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(AB_NYC, price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48,895 × 16\n         id name   host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n      <dbl> <chr>    <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1 18750597 Huge …  8.99e6 Kimber… Brookl… Bedfor…    40.7   -74.0 Privat…     0\n 2 20333471 ★Host…  1.32e8 Anisha  Bronx   East M…    40.8   -73.9 Privat…     0\n 3 20523843 MARTI…  1.58e7 Martia… Brookl… Bushwi…    40.7   -73.9 Privat…     0\n 4 20608117 Sunny…  1.64e6 Lauren  Brookl… Greenp…    40.7   -73.9 Privat…     0\n 5 20624541 Moder…  1.01e7 Aymeric Brookl… Willia…    40.7   -73.9 Entire…     0\n 6 20639628 Spaci…  8.63e7 Adeyemi Brookl… Bedfor…    40.7   -73.9 Privat…     0\n 7 20639792 Conte…  8.63e7 Adeyemi Brookl… Bedfor…    40.7   -73.9 Privat…     0\n 8 20639914 Cozy …  8.63e7 Adeyemi Brookl… Bedfor…    40.7   -73.9 Privat…     0\n 9 20933849 the b…  1.37e7 Qiuchi  Manhat… Murray…    40.8   -74.0 Entire…     0\n10 21291569 Coliv…  1.02e8 Sergii  Brookl… Bushwi…    40.7   -73.9 Shared…     0\n# … with 48,885 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n:::\n\n\nRecode price=$0 to NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- AB_NYC %>% \n  mutate_at(c(\"price\"), ~ na_if(., 0))\n\narrange(AB_NYC, price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48,895 × 16\n         id name   host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n      <dbl> <chr>    <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  1620248 Large…  2.20e6 Sally   Manhat… East V…    40.7   -74.0 Entire…    10\n 2 17437106 Couch…  3.35e7 Morgan  Manhat… Harlem     40.8   -74.0 Shared…    10\n 3 17952277 Newly…  6.27e7 Katie   Brookl… Bushwi…    40.7   -73.9 Privat…    10\n 4 17979764 Jen A…  8.45e7 Jennif… Manhat… SoHo       40.7   -74.0 Privat…    10\n 5 18490141 IT'S …  9.70e7 Maria   Queens  Jamaica    40.7   -73.8 Entire…    10\n 6 18835820 Quiet…  5.28e7 Amy     Manhat… Upper …    40.8   -74.0 Entire…    10\n 7 19415314 Girls…  4.73e7 Mario   Manhat… Hell's…    40.8   -74.0 Shared…    10\n 8 21869057 Spaci…  1.20e7 Vishan… Brookl… Greenp…    40.7   -74.0 Entire…    10\n 9 24114389 Very …  1.81e8 Salim   Manhat… Upper …    40.8   -74.0 Privat…    10\n10 24412104 Cozy …  9.10e7 Maureen Manhat… Kips B…    40.7   -74.0 Privat…    10\n# … with 48,885 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n:::\n\n\nRecode 'price' variable into new 'price_range' variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC <- AB_NYC %>%\n  mutate(price_range = case_when(\n         price < 100 ~ \"less than $100\",\n         price >= 100 & price < 250 ~ \"$100 - $249\",\n         price >= 250 & price < 500 ~ \"$250 - $499\",\n         price >= 500 & price < 750 ~ \"$500 - $749\",\n         price >= 750 & price < 1000 ~ \"$750 - $999\",\n         price >= 1000 ~ \"$1000 or more\")\n  )\nAB_NYC %>% count(price_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  price_range        n\n  <chr>          <int>\n1 $100 - $249    20792\n2 $1000 or more    298\n3 $250 - $499     4991\n4 $500 - $749      682\n5 $750 - $999      255\n6 less than $100 21866\n7 <NA>              11\n```\n:::\n:::\n\n\nDetermine the values associated with each price range category. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(factor(AB_NYC$price_range))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"$100 - $249\"    \"$1000 or more\"  \"$250 - $499\"    \"$500 - $749\"   \n[5] \"$750 - $999\"    \"less than $100\"\n```\n:::\n:::\n\n\nSpecify the factor order. I am having trouble re-ordering the factor levels on the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC %>%\n  filter (!is.na(price_range)) %>% \n ggplot(aes(x=price_range)) + \n   geom_bar(position = \"dodge\",\n           stat = \"count\", fill=\"purple\", colour=\"black\")+\n   labs(title = \"Frequency of Various Price Ranges\", y = \"Frequency\", x = \"Price Range\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nAB_NYC %>%\n mutate(price_range_ordered = factor(price_range, levels = c(6,1,3,4,5,2))) %>%\n ggplot(aes(x=price_range_ordered)) + \n   geom_bar(position = \"dodge\", stat = \"count\", fill=\"purple\", colour=\"black\") +\n   labs(title = \"Frequency of Various Price Ranges\", y = \"Frequency\", x = \"Price Range\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\nCreate ggplot of rentals by NYC Borough, order bars from highest to lowest value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC %>%\n ggplot(aes(x=fct_infreq(neighbourhood_group))) + \n   geom_bar(stat = \"count\", fill=\"blue\", colour=\"black\")+\n   labs(title = \"AirBnB Rentals by NYC Borough\", y = \"Frequency\", x = \"NYC Borough\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nCalculate min/max/mean price (price) and group data by neighbourhood_group and room_type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGrpByNeighborhoodRoom <- AB_NYC %>%\n\tgroup_by(neighbourhood_group) %>%\n\tsummarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) \nhead(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  neighbourhood_group minADR maxADR meanADR\n  <chr>                <dbl>  <dbl>   <dbl>\n1 Bronx                   10   2500    87.6\n2 Brooklyn                10  10000   124. \n3 Manhattan               10  10000   197. \n4 Queens                  10  10000    99.5\n5 Staten Island           13   5000   115. \n```\n:::\n\n```{.r .cell-code}\nAB_NYC %>%\n ggplot(aes(x=neighbourhood_group, y=price)) + \n   geom_bar(position = \"dodge\",fill=\"pink\", colour=\"black\",\n           stat = \"summary\",\n           fun = \"mean\")+\n   labs(title = \"Average AirBnB Nightly Cost by NYC Borough\", y = \"Average Nighyly Cost\", x = \"NYC Borough\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing non-finite values (`stat_summary()`).\n```\n:::\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAdding facet wrap to graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGrpByNeighborhoodRoom <- AB_NYC %>%\n\tgroup_by(neighbourhood_group, room_type) %>%\n\tsummarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'neighbourhood_group'. You can override\nusing the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nhead(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   neighbourhood_group [2]\n  neighbourhood_group room_type       minADR maxADR meanADR\n  <chr>               <chr>            <dbl>  <dbl>   <dbl>\n1 Bronx               Entire home/apt     28   1000   128. \n2 Bronx               Private room        10   2500    66.9\n3 Bronx               Shared room         20    800    59.8\n4 Brooklyn            Entire home/apt     10  10000   178. \n5 Brooklyn            Private room        10   7500    76.5\n6 Brooklyn            Shared room         15    725    50.8\n```\n:::\n\n```{.r .cell-code}\ntail(GrpByNeighborhoodRoom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   neighbourhood_group [2]\n  neighbourhood_group room_type       minADR maxADR meanADR\n  <chr>               <chr>            <dbl>  <dbl>   <dbl>\n1 Queens              Entire home/apt     10   2600   147. \n2 Queens              Private room        10  10000    71.8\n3 Queens              Shared room         11   1800    69.0\n4 Staten Island       Entire home/apt     48   5000   174. \n5 Staten Island       Private room        20    300    62.3\n6 Staten Island       Shared room         13    150    57.4\n```\n:::\n\n```{.r .cell-code}\nAB_NYC %>%\nggplot(aes(x=neighbourhood_group, y=price, fill=room_type)) + \n   geom_bar(position = \"dodge\",\n           stat = \"summary\",\n           fun = \"mean\")+\n   facet_wrap(vars(room_type), scales = \"free_x\") +\n  scale_fill_manual(values=c(\"green\",\"orange\",\"blue\"))+\n  theme(legend.position=\"none\")+\n   scale_x_discrete(guide = guide_axis(n.dodge=2))+\n   labs(title = \"Average AirBnB Nightly Cost by NYC Borough and Room Type\", y = \"Average Nightly Cost\", x = \"NYC Borough\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing non-finite values (`stat_summary()`).\n```\n:::\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nAB_NYC %>%\n  ggplot(aes(fill=price_range, x=room_type)) + \n    geom_bar(position=\"dodge\", stat=\"count\")\n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nRead in and view summary of 'debt_in_trillions' dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_names <- excel_sheets(\"_data/debt_in_trillions.xlsx\")\nsheet_names \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sheet1\"\n```\n:::\n\n```{.r .cell-code}\ndebt_trillions <- read_xlsx (\"_data/debt_in_trillions.xlsx\")\nView(debt_trillions)\nview(dfSummary(debt_trillions))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpgxJwDt\\file3ba456825d96.html\n```\n:::\n:::\n\n\nThis dataset contains 74 rows and 8 columns.  Each row represents a particular year/quarter and provides the average debt in trillions for various types of household expenses (e.g., mortgage, auto loan, credit card, etc.). \n\nPivot longer so that each row contains one observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt_trillions_long <- pivot_longer(debt_trillions, col = c(Mortgage, 'HE Revolving', 'Auto Loan', 'Credit Card', 'Student Loan', Other, Total),\n                 names_to=\"debt_type\",\n                 values_to = \"value\")\nView(debt_trillions_long)\nview(dfSummary(debt_trillions_long))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpgxJwDt\\file3ba418dc7fec.html\n```\n:::\n:::\n\n\nSeparate 'Year and Quarter' into two variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt_trillions_long <- debt_trillions_long %>%\n  separate(\"Year and Quarter\", c(\"year\", \"quarter\"), \":\")\nview(dfSummary(debt_trillions_long))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSwitching method to 'browser'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOutput file written: C:\\Users\\CarlinML\\AppData\\Local\\Temp\\RtmpgxJwDt\\file3ba43eca7d1b.html\n```\n:::\n:::\n\n\nCreate stacked bar chart of debt type by year for quarter 1 only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\ndebt_trillions_long %>%\n  mutate(debt_type = factor(debt_type, levels=c(\"Auto Loan\", \"Credit Card\", \"HE Revolving\", \"Mortgage\", \"Student Loan\", \"Other\"))) %>%\n  filter(debt_type != 'Total') %>%\n  ggplot(aes(x = year, y = value, fill = debt_type)) +\n  geom_col(position = \"fill\") +\n  scale_y_continuous(labels = percent) +\n  labs(title = \"Total Debt by Year and Type of Debt\", y = \"Quarter 1 Percent\", x = \"Year\", fill=\"Type of Debt\") \n```\n\n::: {.cell-output-display}\n![](MicheleCarlin_hw7_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::",
    "supporting": [
      "MicheleCarlin_hw7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}