{
  "hash": "c80cb3f900b0c920d4a7d4ad185676b3",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5 Instructions\"\nauthor: \"Linda Humphrey\"\ndescription: \"Introduction to Visualization\"\ndate: \"03/22/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5: AB_NYC_2019\n  - Name: Linda Humphrey\n  - data: AB_NYC_2019.csv\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(csv)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in data\nReading AB_NYC_2019\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n```\n:::\n\n\n### Briefly describe the data\n\nAB_NYC_2019.csv is a dataset containing information about Airbnb listings in New York City in 2019. It can be used to analyze various aspects of the Airbnb market.\n\n## Tidy Data (as needed)\n\nInspecting the dataset to get an idea of its structure and contents using functions such as head(), tail(), str(), and summary():\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id                                             name host_id   host_name\n1 2539               Clean & quiet apt home by the park    2787        John\n2 2595                            Skylit Midtown Castle    2845    Jennifer\n3 3647              THE VILLAGE OF HARLEM....NEW YORK !    4632   Elisabeth\n4 3831                  Cozy Entire Floor of Brownstone    4869 LisaRoxanne\n5 5022 Entire Apt: Spacious Studio/Loft by central park    7192       Laura\n6 5099        Large Cozy 1 BR Apartment In Midtown East    7322       Chris\n  neighbourhood_group neighbourhood latitude longitude       room_type price\n1            Brooklyn    Kensington 40.64749 -73.97237    Private room   149\n2           Manhattan       Midtown 40.75362 -73.98377 Entire home/apt   225\n3           Manhattan        Harlem 40.80902 -73.94190    Private room   150\n4            Brooklyn  Clinton Hill 40.68514 -73.95976 Entire home/apt    89\n5           Manhattan   East Harlem 40.79851 -73.94399 Entire home/apt    80\n6           Manhattan   Murray Hill 40.74767 -73.97500 Entire home/apt   200\n  minimum_nights number_of_reviews last_review reviews_per_month\n1              1                 9  2018-10-19              0.21\n2              1                45  2019-05-21              0.38\n3              3                 0                            NA\n4              1               270  2019-07-05              4.64\n5             10                 9  2018-11-19              0.10\n6              3                74  2019-06-22              0.59\n  calculated_host_listings_count availability_365\n1                              6              365\n2                              2              355\n3                              1              365\n4                              1              194\n5                              1                0\n6                              1              129\n```\n:::\n\n```{.r .cell-code}\ntail(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            id                                              name   host_id\n48890 36484363                                QUIT PRIVATE HOUSE 107716952\n48891 36484665   Charming one bedroom - newly renovated rowhouse   8232441\n48892 36485057     Affordable room in Bushwick/East Williamsburg   6570630\n48893 36485431           Sunny Studio at Historical Neighborhood  23492952\n48894 36485609              43rd St. Time Square-cozy single bed  30985759\n48895 36487245 Trendy duplex in the very heart of Hell's Kitchen  68119814\n          host_name neighbourhood_group      neighbourhood latitude longitude\n48890       Michael              Queens            Jamaica 40.69137 -73.80844\n48891       Sabrina            Brooklyn Bedford-Stuyvesant 40.67853 -73.94995\n48892       Marisol            Brooklyn           Bushwick 40.70184 -73.93317\n48893 Ilgar & Aysel           Manhattan             Harlem 40.81475 -73.94867\n48894           Taz           Manhattan     Hell's Kitchen 40.75751 -73.99112\n48895    Christophe           Manhattan     Hell's Kitchen 40.76404 -73.98933\n            room_type price minimum_nights number_of_reviews last_review\n48890    Private room    65              1                 0            \n48891    Private room    70              2                 0            \n48892    Private room    40              4                 0            \n48893 Entire home/apt   115             10                 0            \n48894     Shared room    55              1                 0            \n48895    Private room    90              7                 0            \n      reviews_per_month calculated_host_listings_count availability_365\n48890                NA                              2              163\n48891                NA                              2                9\n48892                NA                              2               36\n48893                NA                              1               27\n48894                NA                              6                2\n48895                NA                              1               23\n```\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t48895 obs. of  16 variables:\n $ id                            : int  2539 2595 3647 3831 5022 5099 5121 5178 5203 5238 ...\n $ name                          : chr  \"Clean & quiet apt home by the park\" \"Skylit Midtown Castle\" \"THE VILLAGE OF HARLEM....NEW YORK !\" \"Cozy Entire Floor of Brownstone\" ...\n $ host_id                       : int  2787 2845 4632 4869 7192 7322 7356 8967 7490 7549 ...\n $ host_name                     : chr  \"John\" \"Jennifer\" \"Elisabeth\" \"LisaRoxanne\" ...\n $ neighbourhood_group           : chr  \"Brooklyn\" \"Manhattan\" \"Manhattan\" \"Brooklyn\" ...\n $ neighbourhood                 : chr  \"Kensington\" \"Midtown\" \"Harlem\" \"Clinton Hill\" ...\n $ latitude                      : num  40.6 40.8 40.8 40.7 40.8 ...\n $ longitude                     : num  -74 -74 -73.9 -74 -73.9 ...\n $ room_type                     : chr  \"Private room\" \"Entire home/apt\" \"Private room\" \"Entire home/apt\" ...\n $ price                         : int  149 225 150 89 80 200 60 79 79 150 ...\n $ minimum_nights                : int  1 1 3 1 10 3 45 2 2 1 ...\n $ number_of_reviews             : int  9 45 0 270 9 74 49 430 118 160 ...\n $ last_review                   : chr  \"2018-10-19\" \"2019-05-21\" \"\" \"2019-07-05\" ...\n $ reviews_per_month             : num  0.21 0.38 NA 4.64 0.1 0.59 0.4 3.47 0.99 1.33 ...\n $ calculated_host_listings_count: int  6 2 1 1 1 1 1 1 1 4 ...\n $ availability_365              : int  365 355 365 194 0 129 0 220 0 188 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id               name              host_id           host_name        \n Min.   :    2539   Length:48895       Min.   :     2438   Length:48895      \n 1st Qu.: 9471945   Class :character   1st Qu.:  7822033   Class :character  \n Median :19677284   Mode  :character   Median : 30793816   Mode  :character  \n Mean   :19017143                      Mean   : 67620011                     \n 3rd Qu.:29152178                      3rd Qu.:107434423                     \n Max.   :36487245                      Max.   :274321313                     \n                                                                             \n neighbourhood_group neighbourhood         latitude       longitude     \n Length:48895        Length:48895       Min.   :40.50   Min.   :-74.24  \n Class :character    Class :character   1st Qu.:40.69   1st Qu.:-73.98  \n Mode  :character    Mode  :character   Median :40.72   Median :-73.96  \n                                        Mean   :40.73   Mean   :-73.95  \n                                        3rd Qu.:40.76   3rd Qu.:-73.94  \n                                        Max.   :40.91   Max.   :-73.71  \n                                                                        \n  room_type             price         minimum_nights    number_of_reviews\n Length:48895       Min.   :    0.0   Min.   :   1.00   Min.   :  0.00   \n Class :character   1st Qu.:   69.0   1st Qu.:   1.00   1st Qu.:  1.00   \n Mode  :character   Median :  106.0   Median :   3.00   Median :  5.00   \n                    Mean   :  152.7   Mean   :   7.03   Mean   : 23.27   \n                    3rd Qu.:  175.0   3rd Qu.:   5.00   3rd Qu.: 24.00   \n                    Max.   :10000.0   Max.   :1250.00   Max.   :629.00   \n                                                                         \n last_review        reviews_per_month calculated_host_listings_count\n Length:48895       Min.   : 0.010    Min.   :  1.000               \n Class :character   1st Qu.: 0.190    1st Qu.:  1.000               \n Mode  :character   Median : 0.720    Median :  1.000               \n                    Mean   : 1.373    Mean   :  7.144               \n                    3rd Qu.: 2.020    3rd Qu.:  2.000               \n                    Max.   :58.500    Max.   :327.000               \n                    NA's   :10052                                   \n availability_365\n Min.   :  0.0   \n 1st Qu.:  0.0   \n Median : 45.0   \n Mean   :112.8   \n 3rd Qu.:227.0   \n Max.   :365.0   \n                 \n```\n:::\n:::\n\nChecking for missing values and handle them if necessary using functions such as is.na(), sum(), na.omit().\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for missing values\nsum(is.na(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10052\n```\n:::\n\n```{.r .cell-code}\n# Remove rows with missing values\ndf <- na.omit(df)\n```\n:::\n\n\nCleaning and transforming the data as needed using functions such as, as.numeric(), and rename().\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\",stringsAsFactors = FALSE)\n\n# check for missing values\nsum(is.na(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10052\n```\n:::\n\n```{.r .cell-code}\n# if there are missing values, remove the rows with missing values\ndata <- data[complete.cases(data), ]\n\n# check for duplicates\nsum(duplicated(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# remove duplicates\ndata <- data[!duplicated(data), ]\n\n# visualize the price column using a boxplot\nboxplot(data$price)\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# remove outliers (in this case, we will remove prices above $1,000 per night)\ndata <- data[data$price <= 1000, ]\n\n# rename columns\ncolnames(data)[1] <- \"id\"\ncolnames(data)[2] <- \"name\"\ncolnames(data)[3] <- \"host_id\"\ncolnames(data)[4] <- \"host_name\"\ncolnames(data)[5] <- \"neighbourhood_group\"\ncolnames(data)[6] <- \"neighbourhood\"\ncolnames(data)[7] <- \"latitude\"\ncolnames(data)[8] <- \"longitude\"\ncolnames(data)[9] <- \"room_type\"\ncolnames(data)[10] <- \"price\"\ncolnames(data)[11] <- \"minimum_nights\"\ncolnames(data)[12] <- \"number_of_reviews\"\ncolnames(data)[13] <- \"last_review\"\ncolnames(data)[14] <- \"reviews_per_month\"\ncolnames(data)[15] <- \"calculated_host_listings_count\"\ncolnames(data)[16] <- \"availability_365\"\n\n# remove unnecessary columns (in this case, we will remove the id, host_name, and last_review columns)\ndata <- subset(data, select = -c(id, host_name, last_review))\n\n# convert data types (in this case, we will convert the price and minimum_nights columns to numeric)\ndata$price <- as.numeric(data$price)\ndata$minimum_nights <- as.numeric(data$minimum_nights)\n```\n:::\n\n\nSave the cleaned data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\",stringsAsFactors = FALSE)\n\n# save the cleaned dataset to a new file\nwrite.csv(data, \"~/Desktop/601_Spring_2023/posts/_data/cleaned_airbnb.csv\", row.names = FALSE)\n```\n:::\n\n\nThe resulting dataset will have a row for each date where the availability of the listing is \"available\" or \"not available\", and a new column for the month of the date.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n\nAB_NYC_2019_long <- pivot_longer(AB_NYC_2019, cols = c(\"availability_365\"), names_to = \"date\", values_to = \"availability\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in pivot_longer(AB_NYC_2019, cols = c(\"availability_365\"), names_to = \"date\", : object 'AB_NYC_2019' not found\n```\n:::\n\n```{.r .cell-code}\nAB_NYC_2019_long <- mutate(AB_NYC_2019_long, month = substr(date, 6, 7))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(AB_NYC_2019_long, month = substr(date, 6, 7)): object 'AB_NYC_2019_long' not found\n```\n:::\n\n```{.r .cell-code}\nhead(AB_NYC_2019_long)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(AB_NYC_2019_long): object 'AB_NYC_2019_long' not found\n```\n:::\n:::\n\n\n## Rename variables if necessary using the rename() function from the dplyr package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Rename the neighbourhood variable to neighborhood\ndf <- rename(df, neighborhood = neighbourhood)\n```\n:::\n\n\nConvert variables to appropriate data types if necessary using functions such as as.Date(), as.POSIXct(), and as.factor():\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the last_review variable to a date\ndf$last_review <- as.Date(df$last_review, format='%Y-%m-%d')\n```\n:::\n\n\nMutate() and head() are used to create a new variable named \"total_price\".\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the required packages\nlibrary(dplyr)\n\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n\n# Mutate the data set\ndata <- data %>% \n  mutate(total_price = price * minimum_nights) # Create a new variable named \"total_price\" that multiplies \"price\" and \"minimum_nights\"\n\n# View the mutated data set\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id                                             name host_id   host_name\n1 2539               Clean & quiet apt home by the park    2787        John\n2 2595                            Skylit Midtown Castle    2845    Jennifer\n3 3647              THE VILLAGE OF HARLEM....NEW YORK !    4632   Elisabeth\n4 3831                  Cozy Entire Floor of Brownstone    4869 LisaRoxanne\n5 5022 Entire Apt: Spacious Studio/Loft by central park    7192       Laura\n6 5099        Large Cozy 1 BR Apartment In Midtown East    7322       Chris\n  neighbourhood_group neighbourhood latitude longitude       room_type price\n1            Brooklyn    Kensington 40.64749 -73.97237    Private room   149\n2           Manhattan       Midtown 40.75362 -73.98377 Entire home/apt   225\n3           Manhattan        Harlem 40.80902 -73.94190    Private room   150\n4            Brooklyn  Clinton Hill 40.68514 -73.95976 Entire home/apt    89\n5           Manhattan   East Harlem 40.79851 -73.94399 Entire home/apt    80\n6           Manhattan   Murray Hill 40.74767 -73.97500 Entire home/apt   200\n  minimum_nights number_of_reviews last_review reviews_per_month\n1              1                 9  2018-10-19              0.21\n2              1                45  2019-05-21              0.38\n3              3                 0                            NA\n4              1               270  2019-07-05              4.64\n5             10                 9  2018-11-19              0.10\n6              3                74  2019-06-22              0.59\n  calculated_host_listings_count availability_365 total_price\n1                              6              365         149\n2                              2              355         225\n3                              1              365         450\n4                              1              194          89\n5                              1                0         800\n6                              1              129         600\n```\n:::\n:::\n\n\nThe \"AB_NYC_2019.csv\" dataset can be transformed into factors and reordered for ease of graphics and visualization, such as the \"neighbourhood_group\" variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the required packages\nlibrary(dplyr)\nlibrary(forcats)\n\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n\n# Convert the neighbourhood_group variable to a factor with the desired levels\ndata$neighbourhood_group <- factor(data$neighbourhood_group, levels = c(\"Manhattan\", \"Brooklyn\", \"Queens\", \"Bronx\", \"Staten Island\"))\n\n# Reorder the levels of the neighbourhood_group factor based on median price\ndata$neighbourhood_group <- fct_reorder(data$neighbourhood_group, data$price, .fun = median)\n\n# Plot a box plot of price grouped by neighbourhood_group\nggplot(data, aes(x = neighbourhood_group, y = price)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nLabel encoding can be used to represent string values numerically, such as the \"room_type\" variable in the \"AB_NYC_2019.csv\" dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data set\ndata <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/AB_NYC_2019.csv\")\n\n# Convert the room_type variable to a factor\ndata$room_type <- factor(data$room_type)\n\n# Convert the factor levels to integers using as.numeric()\ndata$room_type_numeric <- as.numeric(data$room_type)\n\n# Display the first few rows of the data\nhead(data[, c(\"room_type\", \"room_type_numeric\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        room_type room_type_numeric\n1    Private room                 2\n2 Entire home/apt                 1\n3    Private room                 2\n4 Entire home/apt                 1\n5 Entire home/apt                 1\n6 Entire home/apt                 1\n```\n:::\n:::\n\n\n\n## Univariate Visualizations\n\nHistogram: to visualize the distribution of continuous variables, such as price or reviews_per_mo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Plot the histogram of the price variable\nggplot(data=df, aes(x=price)) + \n  geom_histogram(bins=30) + \n  labs(x='Price', y='Count')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nPie chart: to visualize the proportion of categorical variables, such as room_type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the pie chart of the room_type variable\nggplot(data=df, aes(x='', fill=room_type)) + \n  geom_bar(position='fill') + \n  labs(y='Room type')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nScatter plot: to visualize the relationship between two continuous variables, such as price and reviews_per_mo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the scatter plot of price and reviews_per_mo\n\nggplot(data=df, aes(x=price, y = reviews_per_month)) + \n  geom_point() + \n  labs(x='Price', y='Reviews per month')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nBox plot: to visualize the distribution of continuous variables and detect outliers, such as min_nights or reviews.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the box plot of the min_nights variable\nggplot(data = df, aes(x='', y = minimum_nights)) + \n  geom_boxplot() + \n  labs(y='Minimum nights')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Bivariate Visualization(s)\n\nBar plot: to visualize the relationship between a categorical variable and a count variable, such as neighbourhood_group and the number of listings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the bar plot of the number of listings by neighbourhood_group\nggplot(data=df, aes(x=neighbourhood_group, fill=neighbourhood_group)) + \n  geom_bar() + \n  labs(x='Neighbourhood group', y='Number of listings') +\n  scale_fill_discrete(name='Neighbourhood group')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nViolin plot: to visualize the relationship between two categorical variables and a continuous variable, such as room type, borough, and price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the violin plot of price by room type and neighbourhood_group \nggplot(data=df, aes(x=room_type, y = price, fill = neighbourhood_group)) + \n  geom_violin() + \n  labs(x='Room type', y='Price') +\n  scale_fill_discrete(name= 'neighbourhood_group')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nScatter plot: to visualize the relationship between two continuous variables, such as price and minimum nights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the scatter plot of price and minimum nights\nggplot(data=df, aes(x=price, y=minimum_nights)) + \n  geom_point() + \n  labs(x='Price', y='Minimum nights')\n```\n\n::: {.cell-output-display}\n![](LindaHumphrey_Challenge_5_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "LindaHumphrey_Challenge_5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}