{
  "hash": "3c4114eb3fa6ce2036a95c4f146b989c",
  "result": {
    "markdown": "---\ntitle: \"AirBnB New York 2019 Challenge 5\"\nauthor: \"Sue-Ellen Duffy\"\ndescription: \"Plotting Price per Neighbourhood Groups\"\ndate: \"03/25/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - Sue-Ellen Duffy\n  - airbnb\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggmap)\nlibrary(maps)\nlibrary(leaflet)\nlibrary(broom)\nlibrary(summarytools)\nlibrary(hrbrthemes)\nlibrary(plotly)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n### AirBnB Listing Data in New York City 2019\n\nThis dataset shows AirBnB listings in NYC in 2019 with 48,895 rows (listings) and 17 columns (data for each listing). We see different types of observations including NYC neighborhood and neighborhood group, type of rental (entire home, private room, shared room), their prices, the minimum required number of nights, and number of guest reviews. Additionally we can see how many listing each host has on AirBnB, how many days a listing was available throughout 2019, and the date of the last guest review.\n\n## Read in the Data\n\nI chose not to pivot this data because each listing was unique, even if a host had different listings, each had different price points, neighborhoods, room types, and names.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-read.csv(\"_data/AB_NYC_2019.csv\")\ntibble(data, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48,895 × 17\n      id name      host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n   <int> <chr>       <int> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <int>\n 1  2539 \"Clean &…    2787 John    Brookl… Kensin…    40.6   -74.0 Privat…   149\n 2  2595 \"Skylit …    2845 Jennif… Manhat… Midtown    40.8   -74.0 Entire…   225\n 3  3647 \"THE VIL…    4632 Elisab… Manhat… Harlem     40.8   -73.9 Privat…   150\n 4  3831 \"Cozy En…    4869 LisaRo… Brookl… Clinto…    40.7   -74.0 Entire…    89\n 5  5022 \"Entire …    7192 Laura   Manhat… East H…    40.8   -73.9 Entire…    80\n 6  5099 \"Large C…    7322 Chris   Manhat… Murray…    40.7   -74.0 Entire…   200\n 7  5121 \"BlissAr…    7356 Garon   Brookl… Bedfor…    40.7   -74.0 Privat…    60\n 8  5178 \"Large F…    8967 Shunic… Manhat… Hell's…    40.8   -74.0 Privat…    79\n 9  5203 \"Cozy Cl…    7490 MaryEl… Manhat… Upper …    40.8   -74.0 Privat…    79\n10  5238 \"Cute & …    7549 Ben     Manhat… Chinat…    40.7   -74.0 Entire…   150\n# … with 48,885 more rows, 7 more variables: minimum_nights <int>,\n#   number_of_reviews <int>, last_review <chr>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <int>, availability_365 <int>, `10` <dbl>,\n#   and abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n:::\n\nThe different data point for each listing:\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"id\"                             \"name\"                          \n [3] \"host_id\"                        \"host_name\"                     \n [5] \"neighbourhood_group\"            \"neighbourhood\"                 \n [7] \"latitude\"                       \"longitude\"                     \n [9] \"room_type\"                      \"price\"                         \n[11] \"minimum_nights\"                 \"number_of_reviews\"             \n[13] \"last_review\"                    \"reviews_per_month\"             \n[15] \"calculated_host_listings_count\" \"availability_365\"              \n```\n:::\n:::\n\n\n## Univariate Graphs:\n# Price by Neighborhood Group\nThis graph here shows us that most of the listings are under $500 per night, though we see a few outliers past that point.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Price ggplot\nggplot(data, aes(price)) + geom_histogram(colour = 4, fill =\"white\",\n                                          binwidth = .15) +\n  labs (title = \"NYC AirBnB Property Prices in 2019\", x = \"Price of Property\", y = \"Count of Properties\")\n```\n\n::: {.cell-output-display}\n![](Sue-EllenDuffy_Challenge_5_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nIn a different angle we can see better that there are outliers in the price ranges, but the data are mostly represented in that under $500 price range.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Price ggplot\nggplot(data, aes(neighbourhood_group, price)) + geom_boxplot() + \n  labs (title = \"NYC AirBnB Property Prices in 2019 by Neighborhood Group\", x = \"Neighbourhood Group\", y = \"Price of Property\") \n```\n\n::: {.cell-output-display}\n![](Sue-EllenDuffy_Challenge_5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nLet's zoom in to that under $500 range.\n\n::: {.cell}\n\n```{.r .cell-code}\n# If you wanted to just see the price for a listing under $500 this graph is more useful\nggplot(data, aes(neighbourhood_group, price)) + geom_boxplot() + ylim(0, 500) + \n  labs (title = \"NYC AirBnB Property Prices (Under $500) in 2019 by Neighborhood Group\", x = \"Neighbourhood Group\", y = \"Price of Property\") \n```\n\n::: {.cell-output-display}\n![](Sue-EllenDuffy_Challenge_5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nLets find the average price per room type and neighborhood group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnm<-data%>%\n  group_by(neighbourhood_group, room_type) %>%\n  select(price) %>%\n  summarize_all(median, na.rm = TRUE) %>%\n  arrange(neighbourhood_group, price)\nnm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n# Groups:   neighbourhood_group [5]\n   neighbourhood_group room_type       price\n   <chr>               <chr>           <dbl>\n 1 Bronx               Shared room      40  \n 2 Bronx               Private room     53.5\n 3 Bronx               Entire home/apt 100  \n 4 Brooklyn            Shared room      36  \n 5 Brooklyn            Private room     65  \n 6 Brooklyn            Entire home/apt 145  \n 7 Manhattan           Shared room      69  \n 8 Manhattan           Private room     90  \n 9 Manhattan           Entire home/apt 191  \n10 Queens              Shared room      37  \n11 Queens              Private room     60  \n12 Queens              Entire home/apt 120  \n13 Staten Island       Shared room      30  \n14 Staten Island       Private room     50  \n15 Staten Island       Entire home/apt 100  \n```\n:::\n:::\n\n## Bivariate Graph: \n# Price by Neighborhood Group and Room Type\nTo no ones surprise the shared room's are the least expensive of the three room types across neighborhoods. What's interesting is that the average price for a shared room in Manhattan is more expensive than the average cost of a private room in any of the other neighborhood groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Price ggplot\nggplot(nm, aes(color = room_type, neighbourhood_group, price)) + geom_point() +\n  labs(title= \"NYC AirBnB Property Prices in 2019 by Neighborhood Group and Room Type\", x = \"Neighbourhood Group\", y = \"Price of Property\")\n```\n\n::: {.cell-output-display}\n![](Sue-EllenDuffy_Challenge_5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Maps - A trial and error\n\nFor Fun! - anyone want to add onto it? I'd be curious to see what others could come up with.\n\n# 1st map\nThis first map Erico helped me with. Here we see the longitude and latitude points from the data mapped according to price and room type\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(longitude, latitude, size = price, color = room_type), group = neighbourhood_group) + geom_point() +\n  labs (size = \"Price of Property\")\n```\n\n::: {.cell-output-display}\n![](Sue-EllenDuffy_Challenge_5_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# 2nd map\nThis second map I made of NYC but I couldn't figure out how to plot the points from the data set\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet() %>%\n  addTiles() %>%\n  setView(-74.00, 40.71, zoom = 12) %>%\n  addProviderTiles(\"CartoDB.Positron\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-535c3345908dd355070f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-535c3345908dd355070f\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]}],\"setView\":[[40.71,-74],12,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n# 3rd map\nThis third map is my attempt of plotting in some data... clearly it didn't work\n\n::: {.cell}\n\n```{.r .cell-code}\nentire_home <-data%>%\n  filter(room_type == \"Entire home/apt\")\nprivate_room <-data%>%\n  filter(room_type == \"Private room\")\nshared_room <- data%>%\n  filter(room_type == \"Shared room\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#from https://r-graph-gallery.com/242-use-leaflet-control-widget.html\ndata_entire_home <- data.frame(LONG=-74.00+rnorm(17), LAT=40+rnorm(17), PLACE=paste(entire_home,seq(1,17)))\ndata_private_room <- data.frame(LONG=-74.00+rnorm(17), LAT=40+rnorm(17), PLACE=paste(private_room,seq(1,17)))\ndata_shared_room <- data.frame(LONG=-74.00+rnorm(17), LAT=40+rnorm(17), PLACE=paste(shared_room,seq(1,17)))\n\nm <- leaflet() %>%\n  setView(lng=-74.00, lat=40, zoom=12 ) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n \n\taddCircleMarkers(data=data_entire_home, lng=~LONG , lat=~LAT, radius=8 , color=\"black\",\n               \tfillColor=\"red\", stroke = TRUE, fillOpacity = 0.8, group=\"Red\") %>%\n  addCircleMarkers(data=data_private_room, lng=~LONG , lat=~LAT, radius=8 , color=\"black\",\n               \tfillColor=\"blue\", stroke = TRUE, fillOpacity = 0.8, group=\"Blue\") %>%\n    addCircleMarkers(data=data_shared_room, lng=~LONG , lat=~LAT, radius=8 , color=\"black\",\n               \tfillColor=\"green\", stroke = TRUE, fillOpacity = 0.8, group=\"Blue\") %>%\n \n  addLayersControl(overlayGroups = c(\"Entire Home\",\"Private Room\",\"Shared Room\") , baseGroups = c(\"background 1\",\"background 2\"),\n               \toptions = layersControlOptions(collapsed = FALSE))\nm\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-f28deb2c4a42ae17f7d4\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f28deb2c4a42ae17f7d4\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[40,-74],12,[]],\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addCircleMarkers\",\"args\":[[40.1769613467577,39.380896162245,40.2856318608221,39.9920901012017,39.2161077813888,40.6342928850799,40.7931630320008,39.6296690160745,40.9079332277957,39.5113471074797,39.2677980856254,40.5175578256455,39.5269156214652,42.3111635804851,40.9151510906928,39.3730693717543,40.3013169012764],[-74.5185010303109,-74.5652707126053,-72.9472808134375,-74.9043358879631,-72.790109846757,-74.3816681369154,-74.4137292955184,-73.0640234806541,-74.0422882466772,-74.5911587933033,-74.4367368327297,-73.7901295919864,-75.3138295946838,-74.0890944077936,-73.6772401989204,-74.5144986939051,-73.4726837259407],8,null,\"Red\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"black\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"red\",\"fillOpacity\":0.8},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[40.5382436918126,40.1819755195164,40.164715129129,41.1368275387855,39.4940115021197,40.8498256479706,40.9987509655157,41.0286941656921,40.7641597237882,41.1625950633454,40.8186626020686,40.675778807004,38.7614444248686,39.1712761261089,39.0744192221501,40.1158128113401,38.3770837154785],[-74.8734732847722,-74.8612259889033,-74.057385433564,-74.5555091053591,-73.8893306278077,-75.5676772953223,-74.1667520808321,-74.4747662161382,-72.9384284041325,-74.6195954028159,-74.7894432156173,-73.7129433575776,-73.3937574141788,-74.635226525409,-74.2150188393635,-74.2947318368132,-73.8819191866924],8,null,\"Blue\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"black\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"blue\",\"fillOpacity\":0.8},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[37.8878181083302,37.9366625233122,39.5455501224143,42.9309987532903,40.2444187584483,42.2728441751057,37.2348171155888,37.5761499950248,40.8901044243912,39.1925019746076,39.6109860523871,41.3116632421865,39.3368156007109,41.2946100025272,38.1881139959635,40.9463464071415,40.9014850684092],[-75.4137744983423,-72.8330498984738,-72.4212961166884,-73.6286499190981,-73.6896186145914,-72.224527926603,-73.4524172627162,-70.7179992263055,-74.1674486183486,-73.6982752545075,-72.7401686979698,-73.8635126534991,-75.6064235068206,-74.6376070602277,-73.8800548211132,-72.7864195768528,-73.0876907559915],8,null,\"Blue\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"black\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"green\",\"fillOpacity\":0.8},null,null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLayersControl\",\"args\":[[\"background 1\",\"background 2\"],[\"Entire Home\",\"Private Room\",\"Shared Room\"],{\"collapsed\":false,\"autoZIndex\":true,\"position\":\"topright\"}]}],\"limits\":{\"lat\":[37.2348171155888,42.9309987532903],\"lng\":[-75.6064235068206,-70.7179992263055]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::",
    "supporting": [
      "Sue-EllenDuffy_Challenge_5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/jquery-1.12.4/jquery.min.js\"></script>\r\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\r\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\r\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\r\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\r\n<script src=\"../site_libs/leaflet-providers-1.9.0/leaflet-providers_1.9.0.js\"></script>\r\n<script src=\"../site_libs/leaflet-providers-plugin-2.1.2/leaflet-providers-plugin.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}