{
  "hash": "5ce9047a72c0d612ded4fb1ec0afb464",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8\"\nauthor: \"PoChun Yang\"\ndescription: \"Joining Data\"\ndate: \"04/26/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - railroads\n  - snl\n  - faostat\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - faostat ⭐⭐\n  \nIn the read data, I read all th fao data here. There would be four of data which call egg, livestock, cattle, country. \n\n::: {.cell}\n\n```{.r .cell-code}\negg<-read_csv(\"_data/FAOSTAT_egg_chicken.csv\",show_col_types = FALSE)\nhead(egg,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QL           Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1961  1961\n 2 QL           Lives…       2 Afgh…    5410 Yield      1062 Eggs…    1961  1961\n 3 QL           Lives…       2 Afgh…    5510 Produc…    1062 Eggs…    1961  1961\n 4 QL           Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1962  1962\n 5 QL           Lives…       2 Afgh…    5410 Yield      1062 Eggs…    1962  1962\n 6 QL           Lives…       2 Afgh…    5510 Produc…    1062 Eggs…    1962  1962\n 7 QL           Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1963  1963\n 8 QL           Lives…       2 Afgh…    5410 Yield      1062 Eggs…    1963  1963\n 9 QL           Lives…       2 Afgh…    5510 Produc…    1062 Eggs…    1963  1963\n10 QL           Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1964  1964\n# … with 4 more variables: Unit <chr>, Value <dbl>, Flag <chr>,\n#   `Flag Description` <chr>, and abbreviated variable names ¹​`Domain Code`,\n#   ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\ndim(egg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38170    14\n```\n:::\n\n```{.r .cell-code}\nlivestock<-read_csv(\"_data/FAOSTAT_livestock.csv\",show_col_types = FALSE)\nhead(livestock,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1961  1961\n 2 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1962  1962\n 3 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1963  1963\n 4 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1964  1964\n 5 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1965  1965\n 6 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1966  1966\n 7 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1967  1967\n 8 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1968  1968\n 9 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1969  1969\n10 QA           Live …       2 Afgh…    5111 Stocks     1107 Asses    1970  1970\n# … with 4 more variables: Unit <chr>, Value <dbl>, Flag <chr>,\n#   `Flag Description` <chr>, and abbreviated variable names ¹​`Domain Code`,\n#   ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\ndim(livestock)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82116    14\n```\n:::\n\n```{.r .cell-code}\ncattle<-read_csv(\"_data/FAOSTAT_cattle_dairy.csv\",show_col_types = FALSE)\nhead(cattle,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QL           Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961\n 2 QL           Lives…       2 Afgh…    5420 Yield       882 Milk…    1961  1961\n 3 QL           Lives…       2 Afgh…    5510 Produc…     882 Milk…    1961  1961\n 4 QL           Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1962  1962\n 5 QL           Lives…       2 Afgh…    5420 Yield       882 Milk…    1962  1962\n 6 QL           Lives…       2 Afgh…    5510 Produc…     882 Milk…    1962  1962\n 7 QL           Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1963  1963\n 8 QL           Lives…       2 Afgh…    5420 Yield       882 Milk…    1963  1963\n 9 QL           Lives…       2 Afgh…    5510 Produc…     882 Milk…    1963  1963\n10 QL           Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1964  1964\n# … with 4 more variables: Unit <chr>, Value <dbl>, Flag <chr>,\n#   `Flag Description` <chr>, and abbreviated variable names ¹​`Domain Code`,\n#   ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n\n```{.r .cell-code}\ndim(cattle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36449    14\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nThe data is extremely tidy data. Therefor, I would not use any command to make a clean data. \nAs the above table, I could know 14 of the columns with same column name. Therefore, I could join data easily.\n\n## Join Data\n\nBe sure to include a sanity check, and double-check that case count is correct!\n\nThe first joins cattle data and livestock. As I used the full_join command here, I got the  118565 rows. I want to prove my answer is correct so I have to sum the rows between those data. In the cattle data, there are 36449 rows. In the livestock data, there are 82116 rows. Therefore, I sum both of the data and got the 118565. This is how I check I am correct. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncattle_live<-full_join(cattle,livestock)\ndim(cattle_live)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 118565     14\n```\n:::\n\n```{.r .cell-code}\nhead(cattle_live)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1961  1961 Head \n2 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1961  1961 hg/An\n3 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1961  1961 tonn…\n4 QL      Lives…       2 Afgh…    5318 Milk A…     882 Milk…    1962  1962 Head \n5 QL      Lives…       2 Afgh…    5420 Yield       882 Milk…    1962  1962 hg/An\n6 QL      Lives…       2 Afgh…    5510 Produc…     882 Milk…    1962  1962 tonn…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Area Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n:::\n\nAs the command, I want to double check whether my idea is correct or not. Therefore, I sum the rows of egg and cattle data. 36449 + 38170 = 74619. \n\n\n::: {.cell}\n\n```{.r .cell-code}\negg_cattle<-full_join(egg,cattle)\ndim(egg_cattle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 74619    14\n```\n:::\n\n```{.r .cell-code}\nhead(egg_cattle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QL      Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1961  1961 1000…\n2 QL      Lives…       2 Afgh…    5410 Yield      1062 Eggs…    1961  1961 100m…\n3 QL      Lives…       2 Afgh…    5510 Produc…    1062 Eggs…    1961  1961 tonn…\n4 QL      Lives…       2 Afgh…    5313 Laying     1062 Eggs…    1962  1962 1000…\n5 QL      Lives…       2 Afgh…    5410 Yield      1062 Eggs…    1962  1962 100m…\n6 QL      Lives…       2 Afgh…    5510 Produc…    1062 Eggs…    1962  1962 tonn…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Area Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}