{
  "hash": "0bc739e7cffc0713727967ab53839d71",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"PoChun Yang\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"03/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - abc_poll\n  - lubridate\n  - stringr\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(readxl)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n\nRead the organiceggpoultry.xls used the read_excel\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel(\"_data/organiceggpoultry.xls\", sheet = \"Data\",skip=4)\ndf2 <- df[,!names(df) %in% c(\"...6\")]\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 10\n   ...1     Extra…¹ Extra…² Large…³ Large…⁴ Whole B/S B…⁵ Bone-…⁶ Whole…⁷ Thighs\n   <chr>      <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> <chr>     <dbl> <chr> \n 1 Jan 2004    230     132     230     126   198.    646. too few    194. too f…\n 2 February    230     134.    226.    128.  198.    642. too few    194. 203   \n 3 March       230     137     225     131   209     642. too few    194. 203   \n 4 April       234.    137     225     131   212     642. too few    194. 203   \n 5 May         236     137     225     131   214.    642. too few    194. 203   \n 6 June        241     137     231.    134.  216.    641  too few    202. 200.3…\n 7 July        241     137     234.    134.  217     642. 390.5      204. 199.5 \n 8 August      241     137     234.    134.  217     642. 390.5      204. 199.5 \n 9 Septemb…    241     136.    234.    130.  217     642. 390.5      204. 199.5 \n10 October     241     136.    234.    128.  217     642. 390.5      204. 199.5 \n# … with 110 more rows, and abbreviated variable names ¹​`Extra Large \\nDozen`,\n#   ²​`Extra Large 1/2 Doz.\\n1/2 Dozen`, ³​`Large \\nDozen`, ⁴​`Large \\n1/2 Doz.`,\n#   ⁵​`B/S Breast`, ⁶​`Bone-in Breast`, ⁷​`Whole Legs`\n```\n:::\n\n```{.r .cell-code}\ncolnames(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"...1\"                            \"Extra Large \\nDozen\"            \n [3] \"Extra Large 1/2 Doz.\\n1/2 Dozen\" \"Large \\nDozen\"                  \n [5] \"Large \\n1/2 Doz.\"                \"Whole\"                          \n [7] \"B/S Breast\"                      \"Bone-in Breast\"                 \n [9] \"Whole Legs\"                      \"Thighs\"                         \n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThis is the code that I try to tidy all the organiceggpoultry_xls. First of all, I used the mutate to copy the date which columns call ...1. Then, I used the rename to change all the columns name. It would be easy to use when I want to used the pivot command. Next, I find that some of the date with /1 so I used str_remove to remove it. In addition, I want to change the date between year and month. Finally, I found that the Jan does not show the full vocabulary as other items so I change Jan to January. Beside that, I separate the part of chicken's price and the type of egg's price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3<-df2%>%\n  mutate(date=...1)%>%\n  select(11,2:10)\ndf3<-df3%>%\n  rename(xlarge_dozen=2,xlarge_halfdozen=3,large_dozen=4,large_halfdozen=5,chicken_whole=6\n         ,chicken_BS_Breast=7,chicken_Bone_Breast=8,chicken_whole_Legs=9,chicken_tight=10)\ndf4<-df3%>%\n  mutate(date = str_remove(date,\" /1\"))\ndf4<-df4%>%\n  separate(date,into = c(\"Month\", \"Year\"),sep = \" \")%>%\n  fill(Year)\ndf4<-df4%>%\n  mutate(Month = replace(Month, Month == 'Jan', 'January')) \ndf4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 11\n   Month   Year  xlarg…¹ xlarg…² large…³ large…⁴ chick…⁵ chick…⁶ chick…⁷ chick…⁸\n   <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl>\n 1 January 2004     230     132     230     126     198.    646. too few    194.\n 2 Februa… 2004     230     134.    226.    128.    198.    642. too few    194.\n 3 March   2004     230     137     225     131     209     642. too few    194.\n 4 April   2004     234.    137     225     131     212     642. too few    194.\n 5 May     2004     236     137     225     131     214.    642. too few    194.\n 6 June    2004     241     137     231.    134.    216.    641  too few    202.\n 7 July    2004     241     137     234.    134.    217     642. 390.5      204.\n 8 August  2004     241     137     234.    134.    217     642. 390.5      204.\n 9 Septem… 2004     241     136.    234.    130.    217     642. 390.5      204.\n10 October 2004     241     136.    234.    128.    217     642. 390.5      204.\n# … with 110 more rows, 1 more variable: chicken_tight <chr>, and abbreviated\n#   variable names ¹​xlarge_dozen, ²​xlarge_halfdozen, ³​large_dozen,\n#   ⁴​large_halfdozen, ⁵​chicken_whole, ⁶​chicken_BS_Breast, ⁷​chicken_Bone_Breast,\n#   ⁸​chicken_whole_Legs\n```\n:::\n\n```{.r .cell-code}\nchicken<-df4%>%\n  select(1:2,7:11)\nchicken\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 7\n   Month     Year  chicken_whole chicken_BS_Breast chicken_Bon…¹ chick…² chick…³\n   <chr>     <chr>         <dbl>             <dbl> <chr>           <dbl> <chr>  \n 1 January   2004           198.              646. too few          194. too few\n 2 February  2004           198.              642. too few          194. 203    \n 3 March     2004           209               642. too few          194. 203    \n 4 April     2004           212               642. too few          194. 203    \n 5 May       2004           214.              642. too few          194. 203    \n 6 June      2004           216.              641  too few          202. 200.375\n 7 July      2004           217               642. 390.5            204. 199.5  \n 8 August    2004           217               642. 390.5            204. 199.5  \n 9 September 2004           217               642. 390.5            204. 199.5  \n10 October   2004           217               642. 390.5            204. 199.5  \n# … with 110 more rows, and abbreviated variable names ¹​chicken_Bone_Breast,\n#   ²​chicken_whole_Legs, ³​chicken_tight\n```\n:::\n\n```{.r .cell-code}\neggs<-df4%>%\n  select(1:6)\neggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 6\n   Month     Year  xlarge_dozen xlarge_halfdozen large_dozen large_halfdozen\n   <chr>     <chr>        <dbl>            <dbl>       <dbl>           <dbl>\n 1 January   2004          230              132         230             126 \n 2 February  2004          230              134.        226.            128.\n 3 March     2004          230              137         225             131 \n 4 April     2004          234.             137         225             131 \n 5 May       2004          236              137         225             131 \n 6 June      2004          241              137         231.            134.\n 7 July      2004          241              137         234.            134.\n 8 August    2004          241              137         234.            134.\n 9 September 2004          241              136.        234.            130.\n10 October   2004          241              136.        234.            128.\n# … with 110 more rows\n```\n:::\n:::\n\n\nAny additional comments?\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nWell, I try my best to combine the time between the year and month and date. When I search the detail is that variable must be \"int\". However, I change that I still not works here. Therefore, I used the stringr which command call str_c to solve the problem. In addition, I used the \"-\" to insert between the month ,yaear, and date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\negg_time<-eggs%>%\n  mutate(date = 15)%>%\n  select(1,2,7)\nmutate(egg_time,'measure_date' = make_date(year = Year, month = Month, day = date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 4\n   Month     Year   date measure_date\n   <chr>     <chr> <dbl> <date>      \n 1 January   2004     15 NA          \n 2 February  2004     15 NA          \n 3 March     2004     15 NA          \n 4 April     2004     15 NA          \n 5 May       2004     15 NA          \n 6 June      2004     15 NA          \n 7 July      2004     15 NA          \n 8 August    2004     15 NA          \n 9 September 2004     15 NA          \n10 October   2004     15 NA          \n# … with 110 more rows\n```\n:::\n\n```{.r .cell-code}\n##after the search on the Net the make_date must be a number \n#mutate(egg_time,produce_time=make_date(Month,Year,date))\n#egg_tidy<-egg_time%>%\n#mutate(Month = replace(Month, Month == 'January',01))%>%\n#mutate(Month = replace(Month, Month == 'February', 02))%>%\n#mutate(Month = replace(Month, Month == 'March', 03))%>%\n#mutate(Month = replace(Month, Month == 'April', 04))%>%\n#mutate(Month = replace(Month, Month == 'May', 05))%>%\n#mutate(Month = replace(Month, Month == 'June', 06))%>%\n#mutate(Month = replace(Month, Month == 'July', 07))%>%\n#mutate(Month = replace(Month, Month == 'August', 08))%>%\n#mutate(Month = replace(Month, Month == 'September', 09))%>%\n#mutate(Month = replace(Month, Month == 'October', 10))%>%\n#mutate(Month = replace(Month, Month == 'November', 11))%>%\n#mutate(Month = replace(Month, Month == 'December', 12))%>%\n#mutate(produce_time=make_date(Month,Year,date))\nmutate(egg_time, produce_time=str_c(date,Month,Year,sep='-'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 4\n   Month     Year   date produce_time     \n   <chr>     <chr> <dbl> <chr>            \n 1 January   2004     15 15-January-2004  \n 2 February  2004     15 15-February-2004 \n 3 March     2004     15 15-March-2004    \n 4 April     2004     15 15-April-2004    \n 5 May       2004     15 15-May-2004      \n 6 June      2004     15 15-June-2004     \n 7 July      2004     15 15-July-2004     \n 8 August    2004     15 15-August-2004   \n 9 September 2004     15 15-September-2004\n10 October   2004     15 15-October-2004  \n# … with 110 more rows\n```\n:::\n:::\n\nIn this part, I used the pivot_longer to make a new format for type of egg with their prices. Then, I used the summarise command to get the max, min, mean, median of the prices from 2004 to 2013.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_summary<-eggs%>%\npivot_longer(col= contains(\"large\"),\n              names_to=\"type_of_egg\",\n              values_to = \"price\")\ndata_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 × 4\n   Month    Year  type_of_egg      price\n   <chr>    <chr> <chr>            <dbl>\n 1 January  2004  xlarge_dozen      230 \n 2 January  2004  xlarge_halfdozen  132 \n 3 January  2004  large_dozen       230 \n 4 January  2004  large_halfdozen   126 \n 5 February 2004  xlarge_dozen      230 \n 6 February 2004  xlarge_halfdozen  134.\n 7 February 2004  large_dozen       226.\n 8 February 2004  large_halfdozen   128.\n 9 March    2004  xlarge_dozen      230 \n10 March    2004  xlarge_halfdozen  137 \n# … with 470 more rows\n```\n:::\n\n```{.r .cell-code}\ndata_summary%>%\ngroup_by(type_of_egg)%>%\nsummarise(Min=min(price),\n          Max=max(price),\n          Mean=mean(price),\n          Median=median(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  type_of_egg        Min   Max  Mean Median\n  <chr>            <dbl> <dbl> <dbl>  <dbl>\n1 large_dozen        225  278.  254.   268.\n2 large_halfdozen    126  178   155.   174.\n3 xlarge_dozen       230  290   267.   286.\n4 xlarge_halfdozen   132  188.  164.   186.\n```\n:::\n:::\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}