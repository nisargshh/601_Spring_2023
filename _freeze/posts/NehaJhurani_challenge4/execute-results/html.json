{
  "hash": "d535e85678b758f8651ea083c10b2602",
  "result": {
    "markdown": "---\ntitle: \"Tidy/Consolidate a dataset\"\nauthor: \"Neha Jhurani\"\ndesription: \"Using mutate and lubridate to tidy dataset: hotel_bookings.csv\"\ndate: \"04/12/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge4\n  - Neha Jhurani\n  - hotel_bookings.csv\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Analysing hotel_bookings data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n#reading hotel_bookings csv data\nhotel_bookings_data <- read_csv(\"_data/hotel_bookings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n#extracting all the column names\ncolnames(hotel_bookings_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n:::\n\n```{.r .cell-code}\ndim(hotel_bookings_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n\n```{.r .cell-code}\n# The dataset contains around 119300 bookings at 2 Hotels from July 2015 to August 2017. There are 32 features for each booking\n\n# We see that there are a lot of variables that can be combined as they represent the same information. For ex - if we wnt to know the arriavl date, we have 4 different attrs for it, i.e., year of arrival, month of arrival, day of arrival and week of arrival. These features separated might help us with some info like, if we want to know the busiest months every year, etc. But, for now, these information makes more sense to our usecase together.\n\nlibrary(dplyr)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\n#need to format month from str to it's respective number. For example - 'January' -> 1. We can use case_when along with mutate() as shown below\nconsolidated_hotel_bookings_data <- hotel_bookings_data %>%\n    mutate(month = case_when(\n       arrival_date_month == \"January\" ~ 1,\n       arrival_date_month == \"February\" ~ 2,\n       arrival_date_month == \"March\" ~ 3,\n       arrival_date_month == \"April\" ~ 4,\n       arrival_date_month == \"May\" ~ 5,\n       arrival_date_month == \"June\" ~ 6,\n       arrival_date_month == \"July\" ~ 7,\n       arrival_date_month == \"August\" ~ 8,\n       arrival_date_month == \"September\" ~ 9,\n       arrival_date_month == \"October\" ~ 10,\n       arrival_date_month == \"November\" ~ 11,\n       arrival_date_month == \"December\" ~ 12,\n     )) %>%\n    mutate(arrival_date = make_date(arrival_date_year, month, arrival_date_day_of_month)) %>% #combining separate parts of date into one\n    select(-c(arrival_date_year, arrival_date_month, arrival_date_day_of_month, month, arrival_date_week_number))  # removing extra columns\n\nview(consolidated_hotel_bookings_data)\n\ndim(consolidated_hotel_bookings_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     29\n```\n:::\n\n```{.r .cell-code}\n#The number of columns reduce to 29\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}