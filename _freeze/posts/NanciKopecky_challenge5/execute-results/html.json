{
  "hash": "5ab05c9d602a9324e7ba7de2ba3e4d25",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5 Marriage in Australia\"\nauthor: \"Nanci Kopecky\"\ndescription: \"Introduction to Visualization\"\ndate: \"4/1/2023\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - australian_marriage\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n\n-   try to make them \"publication\" ready\n-   Explain why you choose the specific graph type\n\n5)  Create at least one bivariate visualization\n\n-   try to make them \"publication\" ready\n-   Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   cereal.csv ⭐\n-   Total_cost_for_top_15_pathogens_2018.xlsx ⭐\n-   Australian Marriage ⭐⭐\n-   AB_NYC_2019.csv ⭐⭐⭐\n-   StateCounty2012.xls ⭐⭐⭐\n-   Public School Characteristics ⭐⭐⭐⭐\n-   USA Households ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\naussie_marry <- read.csv(file = \"_data/australian_marriage_tidy.csv\",\n                header=TRUE,\n                sep = \",\")\nView(aussie_marry)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in check_for_XQuartz(file.path(R.home(\"modules\"), \"R_de.so\")): X11 library is missing: install XQuartz from www.xquartz.org\n```\n:::\n\n```{.r .cell-code}\nhead(aussie_marry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        territory resp   count percent\n1 New South Wales  yes 2374362    57.8\n2 New South Wales   no 1736838    42.2\n3        Victoria  yes 2145629    64.9\n4        Victoria   no 1161098    35.1\n5      Queensland  yes 1487060    60.7\n6      Queensland   no  961015    39.3\n```\n:::\n\n```{.r .cell-code}\nncol(aussie_marry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nnrow(aussie_marry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe data represents the proportions and counts people married in 8 Australian territories.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nThe data is tidy where each cell represents a value and there are no missing values. There are 4 variables, 2 categorical and 2 numerical, and 16 rows. I used the pivot_wider function here to see if the table easier to read and use later for visualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naussie_marry2 <- aussie_marry %>% pivot_wider(names_from = resp, values_from = c(count, percent))\naussie_marry2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  territory                       count_yes count_no percent_yes percent_no\n  <chr>                               <int>    <int>       <dbl>      <dbl>\n1 New South Wales                   2374362  1736838        57.8       42.2\n2 Victoria                          2145629  1161098        64.9       35.1\n3 Queensland                        1487060   961015        60.7       39.3\n4 South Australia                    592528   356247        62.5       37.5\n5 Western Australia                  801575   455924        63.7       36.3\n6 Tasmania                           191948   109655        63.6       36.4\n7 Northern Territory(b)               48686    31690        60.6       39.4\n8 Australian Capital Territory(c)    175459    61520        74         26  \n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nI changed the count to be on the scale of 10,000's so the graph does not have big numbers. I did not use the .after feature because I did not want the table to get too wide.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naussie_marry3 <- aussie_marry2 %>% mutate(count_yes = count_yes/10000, \n                         count_no = count_no/10,000)\n\naussie_marry3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  territory                       count_yes count_no percent_yes percent…¹   `0`\n  <chr>                               <dbl>    <dbl>       <dbl>     <dbl> <dbl>\n1 New South Wales                    237.    173684.        57.8      42.2     0\n2 Victoria                           215.    116110.        64.9      35.1     0\n3 Queensland                         149.     96102.        60.7      39.3     0\n4 South Australia                     59.3    35625.        62.5      37.5     0\n5 Western Australia                   80.2    45592.        63.7      36.3     0\n6 Tasmania                            19.2    10966.        63.6      36.4     0\n7 Northern Territory(b)                4.87    3169         60.6      39.4     0\n8 Australian Capital Territory(c)     17.5     6152         74        26       0\n# … with abbreviated variable name ¹​percent_no\n```\n:::\n:::\n\n\n## Univariate Visualizations\n\nI started with the basics of geom_histogram representing the count of those responded yes and then added more details of the historgram adding fill and labels. The second graph is more colorful and easier to read.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aussie_marry3, aes(count_yes)) + geom_histogram (bins = 15)\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aussie_marry3, aes(count_yes, fill = territory)) + \n  geom_histogram(bins = 15) + \n  labs(title = \"How Many Said YES?!\", x = \"Said YES! x 10,000\", y = \"Frequency\") \n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Bar Graphs\n\nHere I practiced making bar graphs and exploring different ways to show clearly the x axis labels. I had to use geom_col in instead of geom_bar because the data was already summarized with the territory and percent that said yes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(aussie_marry3$percent_yes)\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\naussie_marry3 %>% ggplot(aes(x = territory, y = percent_yes)) + \n  geom_col(aes(fill = territory)) + \n  labs(title = \"Said YES!\", x = \"Aussie Territory\", y = \"Percent %\") + \n  scale_x_discrete(guide = guide_axis(n.dodge = 3)) +\n  NULL\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\naussie_marry3 %>% ggplot(aes(x = territory, y = percent_yes)) + \n  geom_col(aes(fill = territory)) + \n  labs(title = \"Said YES!\", x = \"Aussie Territory\", y = \"Percent %\") + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\n## Bivariate Visualization(s)\n\nAny additional comments?\n\nI used the only two pieces of numerical data to make a scatterplot. One variable was the count and the other was the percent of the same characteristic. I do not expect the graph to be interesting or informative. And while linear regression would not apply here, I practiced using the function for future reference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aussie_marry3, aes(`count_yes`, `percent_yes`)) + \n  geom_point( ) + \n  geom_smooth( ) + \n  labs(title = \"YES! Count and Percent on a Scatterplot\", x = \"Count that Said YES!\", y = \"% that said YES!\")\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsp1<-ggplot(aussie_marry3, aes(x=count_yes, y=percent_yes)) + geom_point() \nsp1\n```\n\n::: {.cell-output-display}\n![](NanciKopecky_challenge5_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "NanciKopecky_challenge5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}