---
title: "Challenge 3 Australian Marriage Pivot"
author: "Kekai Liu"
description: "Tidy Data: Pivoting"
date: "03/07/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - australian_marriage
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê
-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê
-   australian_marriage\*.xls ‚≠ê‚≠ê‚≠ê
-   USA Households\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê
-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü

The data is from the 2017 Australian Marriage Law Postal Survey. It reports the number of yeses and nos from survey respondents at the district level. The data is currently in a wide format and not "tidy." Tidy data requires that every column variable, but there are three count and three percent variables. Pivoting is required to transform the data from wide to long format, by collapsing the count and percent variables into a single count and a single percent variable with the type of response serving as an ID number. The data also has a header and footnotes which need to be removed.

```{r}

aus_marriage <- readxl::read_excel("_data/australian_marriage_law_postal_survey_2017_-_response_final.xls", sheet="Table 2", skip=7)

aus_marriage <- aus_marriage[1:172,] #remove footnotes

aus_marriage$division <- NA #initialize division variable

aus_marriage$division[1:47] <- "New South Wales"
aus_marriage$division[51:87] <- "Victoria"
aus_marriage$division[91:120] <- "Queensland"
aus_marriage$division[124:134] <- "South Australia"
aus_marriage$division[157:161] <- "Tasmania"
aus_marriage$division[165:166] <- "Northern Territory"
aus_marriage$division[170:171] <- "Australian Capital Territory"

aus_marriage <- aus_marriage %>%
  filter(!is.na(division)) %>% #remove any invalid divisions
	rename(x1 = 1, x2 = 2, x3 = 3, x4 = 4, x5 = 5, x6 = 6, x7 = 7, x8 = 8, x9 = 9, x10 = 10, x11 = 11, x12 = 12, x13 = 13, x14 = 14, x15 = 15, x16 = 16) %>%
  mutate(x1 = gsub("\\(c)", "", x1)) %>%
  mutate(x1 = gsub("\\(d)", "", x1)) %>%
  mutate(x1 = gsub("\\(e)", "", x1)) #eliminate footnote letters in district name

head(aus_marriage)

```

### Briefly describe the data

Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"

## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

Implicitly, there are two pivots going on. First, the yes and no counts are pivoted into a single variable. Secondly, the yes and no percentages are pivoted into a single variable. There is only one response type variable (categorizing yes or no) So, there are two variables used to identify a case (division and district) and 4 - 2 = 2 variables to be pivoted. There are 5 columns in the new dataframe, because k = 2 + 2 + 1 (division + district + count + percent + resp). There are 268 columns in the new dataframe.

```{r}

aus_marriage2 <- aus_marriage %>%
	select(x1, x2, x3, x4, x5, division) %>%
  rename(district = x1, yes1count=x2, yes1percent=x3, no2count=x4, no2percent=x5)

#existing rows/cases
nrow(aus_marriage2)

#existing columns/cases
ncol(aus_marriage2)

#expected rows/cases
nrow(aus_marriage2) * (ncol(aus_marriage2)-2)

# expected columns 
2 + 2 + 1

```

Any additional comments?

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

A case correspondents to a single type of response (yes or no) in single district in a division in Australia. This meets the requirements for tidy data, because each column represents a variable, each row corresponds to a single observation, and each cell is a single value. The tidy data set contains 268 rows and 5 columns.

```{r}
aus_marriage_tidy <- aus_marriage2 %>%
	pivot_longer(-c('district', 'division'), names_to=c("resp", ".value"), names_sep = "\\d")

aus_marriage_tidy
```

Any additional comments?

When one needs to pivot multiple columns into separate value columns for the same case variables, it is helpful to rename the pivoted columns into column names based on a pattern. This enables R to recognize which columns go into which new value columns.
