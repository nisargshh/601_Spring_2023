---
title: "2019 AirBnB Rentals in NYC Boroughs"
author: "Michele Carlin"
desription: "Imported, Tidied, Summarized/Graphed data"
date: "03/28/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_5
  - Michele Carlin
  - air_bnb
---

```{r}
#| label: setup
#| warning: false

library(tidyverse)
library(summarytools)
library(dbplyr)
library(readr)
library(forcats)

knitr::opts_chunk$set(echo = TRUE)
```

Read in and view summary of 'AB_NYC_2019' dataset

```{r}
AB_NYC <- read_csv ("_data/AB_NYC_2019.csv")
View(AB_NYC)
view(dfSummary(AB_NYC))
```


This dataset contains 48895 rows and 16 columns.  Each row/observation contains information on Airbnb rentals in NYC during 2019, including the type of rental (e.g., entire home, private room, shared room), the NYC borough, the price, minimum number of nights, and number of reviews. 

Per the data frame summary, the price variable contains some $0's; sort dataframe to review before recoding.

```{r}
AB_NYC <- AB_NYC[order(AB_NYC$price),]
```

Recode price=$0 to NA.

```{r}
AB_NYC <- AB_NYC %>% 
  mutate_at(c("price"), ~ na_if(., 0))

AB_NYC <- AB_NYC[order(AB_NYC$price, na.last=FALSE),]
```

Recode 'price' variable into new 'price_range' variable.

```{r}
AB_NYC <- AB_NYC %>%
  mutate(price_range = case_when(
         price < 100 ~ "less than $100",
         price >= 100 & price < 250 ~ "$100 - $249",
         price >= 250 & price < 500 ~ "$250 - $499",
         price >= 500 & price < 750 ~ "$500 - $749",
         price >= 750 & price < 1000 ~ "$750 - $999",
         price >= 1000 ~ "$1000 or more")
  )
AB_NYC %>% count(price_range)
```

Determine the values associated with each price range category. 

```{r}
unique(AB_NYC$price_range) 
```

Specify the factor order. 
Can't get factor levels to work...(why are they showing in correct order above all of a sudden, but weren't before when I ran this over and over?).

```{r}
AB_NYC<-AB_NYC%>%
  mutate(price_range_ordered = factor(price, 
                       levels = price_range[c(2,3,4,5,6)]))

AB_NYC %>%
  filter (!is.na(price_range)) %>% 
 ggplot(aes(x=price_range)) + 
   geom_bar(position = "dodge",
           stat = "count", fill="purple", colour="black")+
   labs(title = "Frequency of Various Price Ranges", y = "Frequency", x = "Price Range")

```
Create ggplot of rentals by NYC Borough, order bars from highest to lowest value.

```{r}
AB_NYC %>%
 ggplot(aes(x=fct_infreq(neighbourhood_group))) + 
   geom_bar(stat = "count", fill="blue", colour="black")+
   labs(title = "AirBnB Rentals by NYC Borough", y = "Frequency", x = "NYC Borough")
```


Create crosstab of neighbourhood by price_range.

```{r}
xtabs(~ neighbourhood_group + price_range, AB_NYC)
```

Calculate min/max/mean price (price) and group data by neighbourhood_group and room_type.

```{r}
GrpByNeighborhoodRoom <- AB_NYC %>%
	group_by(neighbourhood_group) %>%
	summarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) 
head(GrpByNeighborhoodRoom)

AB_NYC %>%
 ggplot(aes(x=neighbourhood_group, y=price)) + 
   geom_bar(position = "dodge",fill="pink", colour="black",
           stat = "summary",
           fun = "mean")+
   labs(title = "Average AirBnB Nightly Cost by NYC Borough", y = "Average Nighyly Cost", x = "NYC Borough")
```

```{r}
GrpByNeighborhoodRoom <- AB_NYC %>%
	group_by(neighbourhood_group, room_type) %>%
	summarise(minADR = min(price, na.rm = TRUE), maxADR = max(price, na.rm = TRUE), meanADR = mean(price, na.rm = TRUE)) 
head(GrpByNeighborhoodRoom)
tail(GrpByNeighborhoodRoom)

AB_NYC %>%
ggplot(aes(x=neighbourhood_group, y=price, fill=room_type)) + 
   geom_bar(position = "dodge",
           stat = "summary",
           fun = "mean")+
   facet_wrap(vars(room_type), scales = "free_x") +
  scale_fill_manual(values=c("green","orange","blue"))+
  theme(legend.position="none")+
   scale_x_discrete(guide = guide_axis(n.dodge=2))+
   labs(title = "Average AirBnB Nightly Cost by NYC Borough and Room Type", y = "Average Nightly Cost", x = "NYC Borough")
```

```{r}
AB_NYC %>%
  ggplot(aes(fill=price_range, x=room_type)) + 
    geom_bar(position="dodge", stat="count")
```


